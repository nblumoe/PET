(* Name: FORMEL`  
         package of PET: Petrological Elementary Tools 
	 Dachs, E (1998): Computers & Geoscience 24:219-235
	 	  (2004): Computers & Geoscience 30:173-182 *)

(* Summary: this package calculates mineral formulae 
	    and site fractions required for activity calculations and geothermobarometry *)

(* Author: Edgar Dachs, Department of Mineralogy
                        University of Salzburg, Austria
                        email: edgar.dachs@sbg.ac.at
                        last update:  03-2004           *)

BeginPackage["FORMEL`",{"DEFDAT`","UTILITY`"}]

CalcFormula::usage = "CalcFormula[\"filename\"] calculates formula units of minerals and other
mineral-chemical parameters (e.g. Al(IV), Al(VI), site fractions, etc.) from wt% oxides.
\"filename\" is the name of the data file containing the chemical analyses.
Results are written to the file \"filename.fu\".
An outputfile in table format, containing weight % and formula units
for each analysis can be produced with -MakeAnalysisTable-
(see MakeAnalysisTable::usage for more details).
The function -TransformDatFile- can be used to transform data files generated by a
JEOL-microprobe to the structure required as input for -CalcFormula-
(see TransformDatFile::usage for more details).\n
Data file structure:
As an example, data file \"hs78b\" is shown below
(sample 78B, taken from Hodges & Spear (1982) Am Min 67:1118-1134):\n
Label Mineral SiO2   Al2O3  TiO2  MgO    FeO    MnO   CaO   Na2O    K2O
1     bt      36.31  19.74  1.43  10.04  18.35  0.12  0.11   0.28   7.9
2     wm      47.49  35.84  0.43  0.48   0.74   0     0.07   1.78   8.29
3r    grt     38.53  21.85  0     2.3    33.77  4.86  0.87   0      0
4     plag    65.19  21.21  0     0      0      0     2.65   10.95  0.11\n
Data may be separated by tabs, spaces or commas.
The first column accepts numbers or text as labels for each analysis.
It is recommended to combine label-numbers with letters indicating
the textural position of an analysis in the mineral assemblage.
If, e.g. the above bt were an inclusion in garnet, this could be indicated by
adding \"ig\" as \"textural label\":\n
1ig   bt      36.31  19.74  1.43  10.04  18.35  0.12  0.11   0.28   7.9\n
This requires some work at the beginning, but once you have defined and
added your own textural labels, has the enormous advantage that you later on
can easily search your data files for minerals belonging to a specific
textural position as defined by your textural labels and compare them in
a mineral-chemical plot (see ExtractMinDat::usage for more details).
The second column contains the codes required by the program in order to use the correct
oxygen-basis (anhydrous) or cation-basis in the formula calculation (see the list below).
By default, -CalcFormula- computes formulae on an oxygen basis. Using the option
\"CalcFormulaBasis->CationBasis\", -CalcFormula- switches to cation-based mineral formulae.\n
mineral          code         oxygen basis        cation basis\n
alumosilicate    alsi          5                  3
amphibole        amph         23                 15
biotite          bt           11                  8
calcite          cal           1                  1
chlorite         chl          14                 10
chloritoid       ctd           6                  4
clinopyroxene    cpx           6                  4
cordierite       crd          18                 11
dolomite         dol           2                  2
garnet           grt          12                  8
ilmenite         fetiox        3                  2
kfeldspar        kf            8                  5
orthopyroxene    opx           6                  4
other mineral    min...       defined by user    defined by user
olivine          ol            4                  3
plagioclase      plag          8                  5
sapphirine       saph         20                 14
sphene           sphen         5                  3
spinel           spin          4                  3
staurolite       stau         46                 30
stilpnomelane    stilp        23.8125            15.625
talc             ta           11                  7
white mica       wm           11                  7
zoisite/epidote  zoep         12.5                8\n
If <other mineral> is used, \"min\" immediately followed by the numer of oxygens or cations
to be used as basis in the formula calculation must appear as input (e.g. \"min4\" for zircon
analyses on an oxygen basis). Decimal numbers can also be input by using \"d\" as decimal point
(\"min12d5\" would thus calculate the formula for 12.5 oxygens/cations).
Available oxides for usage with - CalcFormula- are:\n
Al2O3, BaO, BeO, B2O3, CaO, CeO2, Ce2O3, Cl, CoO, CO2, Cr2O3, Cs2O, CuO, Dy2O3,
Er2O3, Eu2O3, F, FeO, Fe2O3, Gd2O3, HfO2, H2O, K2O, La2O3, Li2O, Lu2O3, MgO, MnO,
MnO2, Mn3O4, Na2O, Nb2O5, Nd2O3, NiO, PbO, Pr2O3, P2O5, Rb2O, S, Sc2O3, SiO2, Sm2O3,
SnO, SO3, SrO, Ta2O5, ThO2, TiO2, UO2, V2O3, Y2O3, ZnO, ZrO2\n
The calculation of formula units is done as outlined by Giaramita & Day (1990),
Am Min 75:170-182. If F or Cl are present in OH-bearing silicates and H2O is not
specified, the formula is calculated on the anhydrous O-basis (Leake et al. (1997),
Eur J Mineral 9:623-651, p.648). If H2O (or CO2) is given, the formula is calculated on
the total number of (O,OH).
Nomenclature is performed for amphibole (following Leake et al. (1997) Eur J Mineral 9:623-651),
and for pyroxene (according to Morimoto (1988) Min Mag 52:535-550). The filling order of sites
in amph and px also follows these papers.\n
Options:\n
CalcFormulaBasis->OxygenBasis (default)
                  CationBasis\n
CalcFormulaMode->PetToTweeq (default)
                 PetToAx
                 TweeqToPet
                 AxToPet
                 Gtb
                 {}\n
CalcFormulaMode->PetToTweeq
PET -> TWEEQ interface:
To ensure compatibility between mineral-formula calculation sheme and thermodynamic data base (Berman, 1988),
-CalcFormula- creates a \"filename.oxi\"-file by default, for analyses of amphibole, clinopyroxene,
orthopyroxene, plagioclase, white mica, biotite or garnet. Use then Cmp.exe to create
a \"filename.cmp\"-file for further PT-calculations with PET or TWEEQ.\n
CalcFormulaMode->PetToAx
PET -> THERMOCALC interface:
Applying this option, causes -CalcFormula- to create a \"filename.dat\"-file in the format required
by the program AX.exe (part of THERMOCALC software).\n
CalcFormulaMode->TweeqToPet
TWEEQ -> PET interface:
Applying this option, causes -CalcFormula- to convert an input-file for CMP.exe to a PET-readable format.
The file must have the extension \".oxi\" and the corresponding PET-file is then stored under the same
name without extension. Using this option, one can convert CMP-files to PET (e.g. for mineral-chemical plots)
and to THERMOCALC (CalcFormulaMode->PetToAx).\n
CalcFormulaMode->AxToPet
THERMOCALC -> PET interface:
Applying this option, causes -CalcFormula- to convert an input-file for AX.exe to a PET-readable format.
The file must have the extension \".dat\" and the corresponding PET-file is then stored under the same
name without extension. Using this option, one can convert AX-files to PET (e.g. for mineral-chemical plots)
and to TWEEQ (CalcFormulaMode->PetToTweeq).\n
CalcFormulaMode->Gtb
If you want to use the geothermobarometer package (PET-function -CalcThermoBaro-), special
mineral-chemical parameters are needed in some calibrations, e.g. for cpx to calculate the grt-cpx thermometer.
Setting CalcFormulaMode->Gtb causes these parameters to be calculated and appended
as 3rd sub-element at the end of the returned data for that mineral in \"filename.fu\".\n
CalcFormulaMode->{}
In this mode, only a \"filename.fu\" is created by -CalcFormula- (useful e.g. for mineral-chemical plots
with the PET-function -XYPlot- or -TrianglePlot-).\n 
Options for Fe(3+) recalculation:\n
Fe3Amph->LeakeFe3Mean           : mean Fe3+    according to Leake et al. (1997), Eur J Mineral 9:623-651.
         LeakeFe3Min            : minimum Fe3+ according to - \" -.
         LeakeFe3Max            : maximum Fe3+ according to - \" -.
         HollandBlundy (default): Holland & Blundy (1994), Contrib Mineral Petrol 116:433-447,
                                  corrected Dale et al. (2000),  Contrib Mineral Petrol 140:353-362,
                                  required for the amphibole-plagioclase thermometer or the
                                  hornblende-garnet-plagioclase thermobarometer of Dale et al. (2000).
Fe3Px->Droop     (default): Fe3+ according to Droop (1987), Min Mag 51:431-435.
Fe3Grt->Droop    (default): Fe3+ according to - \" -.
Fe3Spin->Droop   (default): Fe3+ according to - \" -.
Fe3Ctd->Droop    (default): Fe3+ according to - \" -.
Fe3Saph->Droop   (default): Fe3+ according to - \" -.
Fe3Fetiox->Droop (default): Fe3+ according to - \" -.
All of these options can be set to Fe3Mineral->NoCalculation, which suppresses Fe3+ recalculation.\n
Other options:\n
Oxygens, NumberFormatFu and NumberFormatX.\n
The option \"Oxygens\" can be used if an analysis is to be calculated to a restricted number of oxygens
excluding some oxides (e.g. sodalite, Deer, Howie, Zussman (1993), Tab. 44, analysis 2).
In this example only oxygens from SiO2 and Al2O3 are relevant, all others are excluded.
This is achieved with:
Calcformula[\"filename\",Oxygens->{{Fe2O3,0},{MnO,0},{Na2O,0},{K2O,0},{SO3,0},{Cl,0}}].
The options  \"NumberFormatFu\" and  \"NumberFormatX\" have the default values
{5,3} and {8,5}, causing that formula units in \"outputfile.fu\"  are written with 3 digits
and mineral chemical parameters with 5 digits to the right of the decimal point.\n
ReturnValue:\n
Returned is a list containing as 1st element:
{Mineral, Label, list of oxides, Total}
the 2nd element contains the analyses, where each list beginns with
the mineral code, followed by the analysis label, then the list
of formula units in the order specified in <list of oxides>,
and finally the total of the analysis. The last element given is a list of
various parameters required for calculating activities and geothermobarometers:
1st element: list of mineral-dependent mineral-chemical parameters, e.g.
             {Al(IV), Al(VI), SumCat, SumM4, etc.}
2nd element: site-fractions for (ideal)activities, e.g. for garnet:
             {{XCa,XMg,XFe,XMn},{XAl,XFe3}}
3rd element (optional): parameters for geothermobarometers.\n
Example (for the data file  \"hs78b\"):\n
CalcFormula[\"hs78b\"]\n
{{Mineral, Label, SiO2, Al2O3, TiO2, MgO, FeO, MnO, CaO, Na2O, K2O, Total}, 
{{bt, 1, 2.745, 1.759, 0.081, 1.131, 1.16, 0.008, 0.009, 0.041, 0.762, 94.28,
{{{Al(IV), Al(VI), SumCat, SumOk, SumA}, {1.25515, 0.50358, 7.69595, 2.88412, 0.81183}},
{{{XK}, {XMgM, XFeM, XTiM, XAlM}, {XOH}}, {{0.93847}, {0.39231, 0.40223, 0.02819, 0.1746}, {1.}}}}},
{wm, 2, 3.12, 2.775, 0.021, 0.047, 0.041, 0., 0.005, 0.227, 0.695, 95.12,
{{{Al(IV), Al(VI), SumCat, SumOk, SumA}, {0.87958, 1.89589, 6.93144, 2.00482, 0.92661}},
{{{XK, XNa, XCa}, {XAlM, XFeM, XMgM}, {XOH}, {XAlT, XSiT}}, 
{{0.75396, 0.24604, 0.00532}, {0.94567, 0.02028, 0.02345}, {1.}, {0.21989, 0.78011}}}}},
{grt, 3, 3.034, 2.028, 0., 0.27, 2.224, 0.324, 0.073, 0., 0., 102.18,
{{{SumCat, Sum(Fe+Mg+Ca+Mn), Fe3, Fe3CalcMode}, {7.95248, 2.89116, 0., Droop}},
{{{XCa, XMg, XFe, XMn}, {XAl, XFe3}}, {{0.02539, 0.09338, 0.76913, 0.11211}, {1., 0.}}}}},
{plag, 4, 2.875, 1.102, 0., 0., 0., 0., 0.125, 0.936,0.006, 100.11,
{{{SumCat}, {5.04508}}, {{{XNa, XCa, XK}}, {{0.87693, 0.11728, 0.0058}}}}}}}\n
The returned list in this example is stored in the file \"hs78b.fu\".
Another example that modifies the format of the formula units to 2 digits:\n
CalcFormula[\"hs78b\",NumberFormatFu->{4,2}]\n
Called from: User.
Package name: FORMEL.m
PET: Petrological Elementary Tools, (c) Edgar Dachs."

Fe3Grt::usage = "Fe3Grt is an option of -CalcFormula-."
Fe3Amph::usage = "Fe3Amph is an option of -CalcFormula-."
Fe3Px::usage = "Fe3Px is an option of -CalcFormula-."
Fe3Spin::usage = "Fe3Spin is an option of -CalcFormula-."
Fe3Ctd::usage = "Fe3Ctd is an option of -CalcFormula-."
Fe3Saph::usage = "Fe3Saph is an option of -CalcFormula-."
Fe3Fetiox::usage = "Fe3Fetiox is an option of -CalcFormula-."
Oxygens::usage = "Oxygens is an option of -CalcFormula-."
NumberFormat::usage = "NumberFormat is an option of -CalcFormula-."


Begin["`Private`"]

FindElementOrder[ox_,ci_,oxl_] := Block[{cil=oxl,pos,i,fe2pos={},d=10^-7},
	(* subfunction of -CalcFormula-  *)
	For[i=1,i<=Dimensions[oxl][[1]],i++, (* find order of oxides  *)
	   pos=Flatten[Position[ox,oxl[[i]]]];
	   If[pos != {}, cil[[i]] = ci[[pos[[1]]]];
	   If[oxl[[i]] == "Fe2O3", If[Dimensions[pos][[1]]==2, cil[[i]]=Chop[ci[[pos[[2]]]],d]]], cil[[i]] = 0]];
	   fe2pos = Position[ox,"FeO"]; 
	If[fe2pos != {}, fe2pos = fe2pos[[1,1]]];	   
	Return[{cil,fe2pos}]]

MinXB[min_] := Block[{xal,xalb,xalm,xalm1,xalm12,xalm2,xalm3,xalt,xalt1,xca,xcam2,
	(* define the site fractions to be calculated for various minerals groups  *)
	xcam4,xfe,xfe2,xfe2a,xfe2b,xfe2m1,xfe2m2,xfe3,xfe3a,xfe3b,xfe3m12,
	xfe3m2,xfe3m3,xfem,xfem13,xfem2,xfem4,xk,xka,xmg,xmga,xmgm,xmgm1,
	xmgm13,xmgm2,xmgm4,xmn,xmnm13,xmnm4,xmna,xna,xnaa,xnam2,xnam4,xoh,xsit,
	xsit1,xti,xtib,xtim,xtim2,xva,xzn},
	(* define site-fractions to be calculated for each mineral  *)

	If[min == "bt",  
	  x = { {{"XK"},{"XMgM","XFeM","XTiM","XAlM"},{"XOH"}},{{xk},{xmgm,xfem,xtim,xalm},{xoh}}  }];
	If[min == "grt", 
	  x = { {{"XCa","XMg","XFe","XMn"},{"XAl","XFe3"}},{{xca,xmg,xfe,xmn},{xal,xfe3}} }];
	If[min == "chl", 
	  x = { {{"XFeM","XMgM","XAlM"},{"XOH"},{"XAl","XSi"}},{{xfem,xmgm,xalm},{xoh},{xalt,xsit}} }];
	If[min == "wm",  
	  x = { {{"XK","XNa","XCa"},{"XAlM","XFeM","XMgM"},{"XOH"},{"XAlT","XSiT"}},{{xk,xna,xca},{xalm,xfem,xmgm},{xoh},{xalt,xsit}}  }];
	If[min == "fsp", x = { {{"XNa","XCa","XK"}},{{xna,xca,xk}} }];
	If[min == "amph",  
	  x = { {{"XNaA","XKA","XVacA"}, {"XCaM4","XMgM4","XFeM4","XMnM4","XNaM4"},{"XMgM13","XFeM13","XMnM13"},{"XMgM2","XFeM2","XAlM2","XFe3M2","XTiM2"},{"XOH"},{"XAlT1","XSiT1"}},
	      {{xnaa,xka,xva}, {xcam4,xmgm4,xfem4,xmnm4,xnam4},{xmgm13,xfem13,xmnm13},{xmgm2,xfem2,xalm2,xfe3m2,xtim2},{xoh},{xalt1,xsit1}}  }];
	If[min == "px",  
	  x = { {{"XCaM2","XNaM2","XFeM2","XMgM2"},{"XFeM1","XMgM1","XAlM1"}},
	  {{xcam2,xnam2,xfe2m2,xmgm2},{xfe2m1,xmgm1,xalm1}}  };	  
	  ];
	If[min == "stau", x = { {{"XFe","XMg","XMn","XZn"}},{{xfe,xmg,xmn,xzn}} }];
	If[min == "ctd", x = { {{"XFe","XMg","XMn"}},{{xfe,xmg,xmn}} }];
	If[min == "crd", x = { {{"XFe","XMg","XMn"}},{{xfe,xmg,xmn}} }];
	If[min == "ol", x = { {{"XFe","XMg"}},{{xfe,xmg}} }];
	If[min == "zoep", x = { {{"XCa"},{"XAlM12","XFe3M12"},{"XAlM3","XFe3M3"},{"XSiT"},{"XOH"}},{{xca},{xalm12,xfe3m12},{xalm3,xfe3m3},{xsit},{xoh}} }];
	If[min == "cal", x = { {{"XCa","XMg","XFe","XMn"}},{{xca,xmg,xfe,xmn}} }];
	If[min == "dol", x = { {{"XCa","XMg","XFe","XMn"}},{{xca,xmg,xfe,xmn}} }];
	If[min == "spin", x = { {{"XFe2A","XMgA","XFe3A"},{"XFe2B","XAlB","XFe3B"}},{{xfe2a,xmga,xfe3a},{xfe2b,xalb,xfe3b}} }];
	If[min == "saph", x = { {{"XFe2M","XMgM","XAlM","XFe3M"}},{{xfe2,xmg,xal,xfe3}} }];
	If[min == "fetiox", x = { {{"XFe2A","XFe3A","XMnA"},{"XFe3B","XTiB"}},{{xfe2a,xfe3a,xmna},{xfe3b,xtib}} }];
	If[min == "sphen", x = { {{"XCa"},{"XTi"}},{{xca},{xti}} }];
	If[min == "ta", x = { {{"XMgM","XFeM","XAlM"},{"XOH"},{"XAlT","XSiT"}},{{xmgm,xfem,xalm},{xoh},{xalt,xsit}}  }];
	Return[x];
]

MinXHP[min_,flag_] := Block[{xal,xalb,xalm,xalm1,xalm12,xalm2,xalm3,xalt,xalt1,xca,xcam2,
	(* define the site fractions to be calculated for various minerals groups  *)
	xcam4,xfe,xfe2,xfe2a,xfe2b,xfe2m1,xfe2m2,xfe3,xfe3a,xfe3b,xfe3m12,
	xfe3m2,xfe3m3,xfem,xfem13,xfem2,xfem4,xk,xka,xmg,xmga,xmgm,xmgm1,
	xmgm13,xmgm2,xmgm4,xmn,xmnm13,xmnm4,xmna,xna,xnaa,xnam2,xnam4,xoh,xsit,
	xsit1,xti,xtib,xtim,xtim2,xva,xzn},
	(* define site-fractions to be calculated for each mineral  *)

	If[min == "grt", 
	  x = { {{"XMg","XCa","XFe","XMn"},{"XAl","XFe3"}},{{xmg,xca,xfe,xmn},{xal,xfe3}},{"XPy","XGr","XAlm","XSp","XAndr"},{xpy,xgr,xalm,xsp,xandr} }];
	If[min == "chl", 
	  x = { {{"XMgM23","XFeM23"},{"XMgM1","XAlM1","XFeM1"},{"XMgM4","XAlM4"},{"XOH"},{"XSiT2","XAlT2"}},
	  {{"nd","nd"},{"nd","nd","nd"},{"nd","nd"},{xoh},{xsit2,xalt2}},{"y=XAl(T2)","x=Fe/(Fe+Mg)"},{y,x} }];
	If[min == "px",  
	  If[flag == 0,  (* cpx1: C2/c calcic px with na <= 0.3 *)
	    x = { {{"XCaM2","XNaM2","XMgM2"},{"XAlM1","XFe3M1","XMgM1","XFeM1"}},
	    {{xcam2,xnam2,xmgm2},{xalm1,xfe3m1,xmgm1,xfe2m1}},{"XDi","XHed","XCats","XJd","XEn"},{xdi,xhed,xcats,xjd,xen}};
	    ];
	  If[flag == 1,  (* cpx2: C2/c or P2/n calcic px with na > 0.3 *)
	    x = { {{"XCaM2","XNaM2","XMgM2"},{"XAlM1","XFe3M1","XMgM1","XFeM1"}},
	    {{xcam2,xnam2,xmgm2},{xalm1,xfe3m1,xmgm1,xfe2m1}},{"XJd","XAcm","XDi","XHd"},{xjd,xae,xdi,xhed}};
	    ];
	  If[flag == 2,  (* opx *)
	    x = { {{"XMgM2","XFeM2","XCaM2"},{"XMgM1","XFeM1","XAlM1"}},
	    {{xmgm2,xfe2m2,xcam2},{xmgm1,xfe2m1,xalm1}},{"XEn","XFs","XMgts","XDi"},{xen,xfs,xmgts,xdi}};	  
	    ];
	  ];
	If[min == "ol", x = { {{"XMgM1","XFeM1"},{"XMgM2","XFeM2"}},{{xmg,xfe},{xmg,xfe}},{"XFo","XFa"},{xfo,xfa} }];
	If[min == "ta", x = { {{"XMgM12","XFeM12"},{"XMgM3","XFeM3","XAlM3"},{"XSiT1","XAlT1"}},
	  		      {{xmgm,xfem},{(1-xalm3)*xmgm,(1-xalm3)*xfem,xalm3},{xsit1,xalt1}},{},{}  }];
	If[min == "ctd", x = { {{"XMgM2","XFeM2","XMnM2"},{"XAlM1","XFe3M1"}},{{xmg,xfe,xmn},{xalm1,xfe3m1}},{"XMgCtd","XFeCtd","XMnCtd"},{xmg,xfe,xmn} }];
	If[min == "crd", x = { {{"XMgM","XFeM","XMnM"}},{{xmg,xfe,xmn}},{"XMgCrd","XFeCrd","XMnCrd"},{xmg,xfe,xmn} }];
	If[min == "stau", x = { {{"XMg","XFe","XMn"}},{{xmg,xfe,xmn}},{},{} }];
	If[min == "zoep", x = { {{"XCaM2"},{"XAlM1","XFe3M1"},{"XAlM3","XFe3M3"}},{{ca-1},{"nd","nd"},{"nd","nd"}},{"x=Fe3/(Fe3+Al(VI)-1"},{xfe3} }];
	If[min == "fsp", 
	  If[flag == 0,  x = { {{"XNa","XCa"}},{{xna,xca}},{"XAb","XAn"},{xna,xca} }];
	  If[flag == 1,  x = { {{"XNa","XK"}}, {{xna,xk}}, {"XAb","XOr"},{xna,xk} }];	
	  ];
	If[min == "amph",
	  If[flag == 0,  
	    x = { {{"XNaA","XKA","XVacA"}, {"XCaM4","XNaM4"},{"XMgM13","XFeM13"},{"XMgM2","XFeM2","XAlM2","XFe3M2"},{"XSiT1","XAlT1"}},
	        {{xnaa,xka,xva}, {xcam4,xnam4},{xmgm13,xfem13},{xmgm2,xfem2,xalm2,xfe3m2},{xsit1,xalt1}},
	        {"XTr","XFact","XTs","XPrg","XGl","XFits","XKprg"},{ptr1,pfact,pts,pparg,pgl1,pfts,pkpa}  }];
	  If[flag == 1,  
	    x = { {{"XNaA","XKA","XVacA"}, {"XCaM4","XNaM4"},{"XMgM13","XFeM13"},{"XMgM2","XFeM2","XAlM2","XFe3M2"},{"XSiT1","XAlT1"}},
	        {{xnaa,xka,xva}, {xcam4,xnam4},{xmgm13,xfem13},{xmgm2,xfem2,xalm2,xfe3m2},{xsit1,xalt1}},
	        {"XGl","XFgl","XRieb"},{pgl1,pfgl1,prieb1}  }];	      
	  If[flag == 2,  
	    x = { {{"XNaA","XKA","XVacA"}, {"XCaM4","XNaM4"},{"XMgM13","XFeM13"},{"XMgM2","XFeM2","XAlM2","XFe3M2"},{"XSiT1","XAlT1"}},
	        {{xnaa,xka,xva}, {xcam4,xnam4},{xmgm13,xfem13},{xmgm2,xfem2,xalm2,xfe3m2},{xsit1,xalt1}},
	        {"XCumm","XGrun"},{pcum1,pgrun1}  }];	      
	  ];
 	If[min == "wm",  
	  If[flag == 0, (* muscovite - phengite *) 	  
	    x = { {{"XKA","XNaA","XCaA"},{"XAlM2A","XMgM2A","XFeM2A"},{"XSiT1","XAlT1"}},
	        {{xk1,xna1,xca1},{xalm2a,xmgm2a,xfem2a},{xsit1,xalt1}},{"XMu","XPa","XCel","XFcel"},{xmu1,xpa1,xcel1,xfcel1}  }];	  
	  If[flag == 1, (* margarite *) 	  
	    x = { {{"XKA","XNaA","XCaA"},{"XAlM2A","XMgM2A","XFeM2A"},{"XSiT1","XAlT1"}},
	        {{xk1,xna1,xca1},{xalm2a,xmgm2a,xfem2a},{xsit1,xalt1}},{"XPa","XMa","XVac"},{xna1,xca1,xv1}  }];	  
	  If[flag == 2,  (* paragonite *)	  
	    x = { {{"XKA","XNaA","XCaA"},{"XAlM2A","XMgM2A","XFeM2A"},{"XSiT1","XAlT1"}},
	        {{xk1,xna1,xca1},{xalm2a,xmgm2a,xfem2a},{xsit1,xalt1}},{"XMu","XPa","XVac"},{xk1,xna1,xv1}  }];	  
	  If[flag == 3,  (* muscovite - phengite: Goggon & Holland (2002) *)	  
	    x = { {{"XKA","XNaA","XCaA","XVacA"},{"XMgM1","XVacM1"},{"XAlM2A","XMgM2A","XFe2M2A"},{"XAlM2B","XMgM2B","XFe3M2B","XTiM2B"},{"XSiT1","XAlT1"}},
	        {{xka,xnaa,xcaa,xva},{xmgm1,xvm1},{xalm2a,xmgm2a,xfem2a},{xalm2b,xmgm2b,xfe3m2b,xtim2b},{xsit1,xalt1}},
	        {"XMu","XPa","XMa","XCel","XFcel","XPyp"},{xms2,xpa2,xma2,xcel2,xfcel2,xpyp2}  }];	  
	  ];
	If[min == "bt",  
	  x = { {{"XKA"},{"XMgM1","XFeM1","XAlM1"},{"XMgM2","XFeM2"},{"XSiT1","XAlT1"}},
	  {{xk},{"nd","nd",xalm1},{"nd","nd"},{xsit1,xalt1}},{"y=XAl(M1)","x=Fe/(Fe+Mg)","Fe3","Ti"},{y,x,fe3,ti}  }];
	If[min == "spin", x = { {{"XMgA","XFe2A"},{"XAlB","XFe3B"}},{{xmga,xfe2a},{xalb,xfe3b}},{"XSp","XHerc","XMt"},{xsp,xherc,xmt} }];
	If[min == "saph", x = { {{"XMgM","XFeM","XAlM"},{"XSiT","XAlT"}},{{xmgm,xfem,xalm},{xsit,xalt}},{},{} }];
	If[min == "dol", x = { {{"XCaM2"},{"XMgM1","XFeM1"}},{{xcam2},{xmgm1,xfem1}},{"XDol","XAnk"},{xmgm1,xfem1} }];
	If[min == "cal", x = { {{"XCaM","XMgM","XFeM","XMnM"}},{{xca,xmg,xfe,xmn}},{"XCal","XMag","XSid","XRhc"},{xca,xmg,xfe,xmn} }];
	If[min == "fetiox", x = { {{"XFe2M1","XFe3M1","XMnM1","XMgM1"},{"XTiM2","XFe3M2"}},{{xfe2a,xfe3a,xmna,xmga},{xtib,xfe3b}},{},{} }];
	If[min == "sphen", x = { {{"XCa"},{"XTi"}},{{xca},{xti}},{},{} }];
	Return[x];
]

GtbX[min_] := Block[{xca,xna,xk,xmg,xfe,xmn,xmgm,xfem,xtim,xalm,xoh,xfe2a,xmga,xmna,fe,fe2,mg,ca,na,al,cr,ti,fe3,xmgm1gt7,xfem1gt7,xalm1gt7,xmgm2gt7,xfem2gt7,
	xfegt710,xmggt710,xcagt710,xalgt710,xfegt9,xmggt9,xalgt9,xmgm1gt10,xmgm2gt10,xmsgb8,xcelgb8,xmsgt26,xmgcelgt26,xfecelgt26},
	(* parameters for various geothermometers (numbered gt-1, etc.) and geobarometers (numbered gb-1, etc.) *)
	
	If[min == "grt", x = { {{"gt-1-2-3-6-12-14-15-16-17-20,gb-1-2-3-4-5-6-7-9-14-15","XCa","XMg","XFe","XMn"},
				{"gt-7-9","Fe2+/Mg","XCa","XMg","XFe","XMn","XMg#"},
				{"gb-14","XAl","XCr"}},
				{{xca,xmg,xfe,xmn},
				{fe2/mg,xca,xmg,xfe,xmn,mg/(mg+fe2)},
				{xalgb14,xcrgb14}} }];
	If[min == "bt",  
	  x = { {{"gt-1-4-5-11-19,gb-2-4","XMgM","XFeM","XTiM","XAlM","XOH"},{"gb-6","XFeM","XKA"},
	        {"gb-8","XPhl1","XPhl2"}},
	        {{xmgm,xfem,xtim,xalm,xoh},{xfem,xk},{xphl1,xphl2}}  }];
	If[min == "wm",  
	  x = { {{"gt-2-5,gb-3-5","XFeM","XMgM","XAlM"},{"gt-8","XMs","XPa"},
	        {"gb-2-6","XK","XNa","XAlM","XFeM"},{"gb-8","XMs","XCel"},{"gb-10","a(inv.ph.)"},{"gt-26","XMs","XMgCel","XFeCel"}},
	        {{xfem,xmgm,xalm},{xms,xpa},{xk,xna,xalm,xfem},{xmsgb8,xcelgb8},{ainvphe},{xmsgt26,xmgcelgt26,xfecelgt26}}  }];
	If[min == "chl", 
	  x = { {{"gt-3-4-18,gb-12","XFeM","XMgM"},{"gb-8","XClin"}},{{xfem,xmgm},{xclin}} }];
	If[min == "fetiox", x = { {{"gt-6,gb-7","XFe2A","XMnA","XTiB"}},{{xfe2a,xmna,xtib}} }];
	If[min == "px",  
	  x = { {{"gt-7","Fe2+/Mg","XMgM1","XFeM1","XAlM1","XMgM2","XFeM2"},
	         {"gt-7/10","XFe","XMg","XCa","XAl"},
	         {"gt-9-11,gb-15","Fe2+/Mg","XFe","XMg","XAl"},
	         {"gt-10-13","Fe2","Mg","Al","Ca","Na","XMgM1","XFeM1","XMgM2"},
	         {"gb-14","XAlM1ts","XMFM1","XMFM2","XMgM1","XFeM1"}},
	      {{fe2/mg,xmgm1gt7,xfem1gt7,xalm1gt7,xmgm2gt7,xfem2gt7},
	       {xfegt710,xmggt710,xcagt710,xalgt710},
	       {fe2/mg,xfegt9,xmggt9,xalgt9},
	       {fe2,mg,al,ca,na,xmgm1gt10,xfem1gt13,xmgm2gt10},
	       {xalm1tsgb14,xmfm1gb14,xmfm2gb14,xmgm1gb14,xfem1gb14}}  };	  
	  ];
	If[min == "fsp", x = { {{"gt-8-23-25,gb-1-2-3-4-9-15","XNa","XCa","XK"}},{{xna,xca,xk}} }];
	If[min == "ol", x = { {{"gt-12-13-21","XFe","XMg"}},{{xfe,xmg}} }];
	If[min == "amph",  
	  x = { {{"gt-14,gb-12","XFe","XMg"},{"gt-23","XSiT1","XAlT1","XAlM2","XCaM4","XNaM4","XNaA","XKA","XVacA"},
	         {"gb-9","Pgl","Pparg","Pkpa","Pfts","Pts","Pcum","Ptia","Pmna","Pfact","Ptr"} },
	      {{xfe,xmg},{xsit1,xalt1,xalm2,xcam4,xnam4,xnaa,xka,xva},
	       {pgl,pparg,pkpa,pfts,pts,pcum,ptia,pmna,pfact,ptr}}  }];
	If[min == "crd", x = { {{"gt-15-22","XFe","XMg"}},{{xfe,xmg}} }];
	If[min == "stau", x = { {{"gt-16","XFe","XMg"}},{{xfe,xmg}} }];
	If[min == "ctd", x = { {{"gt-17-18-19","XFe","XMg"}},{{xfe,xmg}} }];
	If[min == "spin", x = { {{"gt-20-21-22","Fe2","Mg","Cr","Ti","Al","Fe3"}},{{fe2,mg,cr,ti,al,fe3}} }];
	If[min == "cal", x = { {{"gt-24","XCa","XMg","XFe","XMn"}},{{xca,xmg,xfe,xmn}} }];
	If[min == "stilp",  
	  x = { {{"gt-26/gb-17","XSi","XAl","XFe"}},{{xsi,xal,xfe}}  }];

	Return[x];
]

Bt[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,xsgtb,i,fe=0,mg=0,ti=0,al=0,alvi=0,aliv=0,si=0,k=0,na=0,ca=0,mn=0,ba=0,fe3=0,
	cr=0,fe2pos,f=0,cl=0,h2o=0,s=0,xsit,xalt,xfem,xmgm,xtim,xalm,xoh,xk,xalm1,x,y,xsit1,xalt1,ret,xphl,xphl1},
	oxl = {"FeO","MgO","TiO2","Al2O3","SiO2","K2O","Na2O","CaO","MnO","BaO","Fe2O3","Cr2O3","F","Cl","H2O","S"};
	xs1 = {"Al(IV)","Al(VI)","SumCat","SumOk","SumA"};
	{{fe,mg,ti,al,si,k,na,ca,mn,ba,fe3,cr,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	(* site allocation and -fractions according to McMullin et al. (1991)  *)
	(* (K,Na,Ba)A,(Fe2,Mg,Mn,Ti,Al,Cr,Fe3)3M,(Si,Al)4T,O10(OH)2 *)
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-f-cl-h2o-s;	(* sum cations *)
	If[si < 4, aliv = 4 - si; xalt = aliv/4, xalt = 0];	(* tetrahedral Al, XAl on T *)
	If[al-aliv > 0, alvi = al - aliv];			(* octahedral Al  *)
	xsit = si/4;						(* XSi  on T   *)
	xfem = fe/(fe+mg+mn+alvi+ti+fe3+cr);			(* XFe	on M, see McMullin et al, 1991, p.892  *)
	xmgm = mg/(fe+mg+mn+alvi+ti+fe3+cr);			(* XMg	on M  *)
	xtim = ti/(fe+mg+mn+alvi+ti+fe3+cr);			(* XTi  on M  *)
	xalm = alvi/(fe+mg+mn+alvi+ti+fe3+cr);			(* XAl  on M  *)
	If[h2o==0, xoh = 1 - ((f+cl+s)/2), xoh = h2o/(h2o+f+cl+s)];	(* XOH	      *)
	xk = k/(k+na+ca+ba);

        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["bt"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
          xalm1 = alvi; xsit1 = (si-2)/2; xalt1 = (2-2*xsit1)/2; If[xalt1 < 0, xalt1 = 0];
          y = alvi; x = fe/(fe+mg);          
          ret = MinXHP["bt",0]];
	If[mode == FORMEL`Gtb,
	  xphl1 = 9.48 xk (mg/(mg+fe))^2 (1-alvi)(mg/(mg+fe)) (al/4) xsit^3 xoh^2; (* XPhl for gb-8 *)
	  xphl2 = xk (mg/(mg+fe))^3;	(* XPhl for gb-8: Bucher-Nurminen calibration *)
	  Return[{{{xs1,{aliv,alvi,sumcat,fe+mg+mn+alvi+ti+fe3+cr,k+na+ba+ca}}, ret, GtbX["bt"]}}]];
	Return[{{{xs1,{aliv,alvi,sumcat,fe+mg+mn+alvi+ti+fe3+cr,k+na+ba+ca}}, ret}}];	
]

Chl[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,i,fe=0,mg=0,ti=0,al=0,alvi=0,aliv=0,si=0,ca=0,mn=0,fe3=0,cr=0,fe2pos,
	f=0,cl=0,h2o=0,s=0,xvm,xfem,xmgm,xoh,xalm,xalt,xsit,ret,y,xalt2,xsit2,x,xalm1,xmgm1,xclin},
	oxl = {"FeO","MgO","TiO2","Al2O3","SiO2","CaO","MnO","Fe2O3","Cr2O3","F","Cl","H2O","S"};
	xs1 = {"Al(IV)","Al(VI)","SumCat","SumOk"};
	{{fe,mg,ti,al,si,ca,mn,fe3,cr,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	
	(* site allocation: simple model assuming 6 identical M-sites and 4 identical T-sites:
	   (Fe2,Mg,Mn,Ca,Al,Cr,Fe3,Ti,Vac)6M(Si,Al)4T O10(OH)8 *)
	
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-f-cl-h2o-s;		(* sum cations *)
	If[si < 4, aliv = 4 - si];					(* tetrahedral Al	*)
	If[al-aliv > 0, alvi = al - aliv];				(* octahedral Al *)
	xsit = si/4;							(* XSi on T *)
	xalt = aliv/4;							(* XAl on T *)
	xfem = fe/(fe+mg+mn+ca+alvi+ti+fe3+cr);				(* XFe on M *)
	xmgm = mg/(fe+mg+mn+ca+alvi+ti+fe3+cr);				(* XMg on M *)
	xalm = alvi/(fe+mg+mn+ca+alvi+ti+fe3+cr);			(* XAl on M *)
	If[(6-(fe+mg+mn+ca+alvi+ti+fe3+cr))/6 > 0, xvm = (6-(fe+mg+mn+ca+alvi+ti+fe3+cr))/6];	(* XVac on M *)
	If[h2o==0, xoh = 1 - ((f+cl+s)/8), xoh = h2o/(h2o+f+cl+s)];	(* XOH	*)

        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["chl"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
          y = aliv/2; x = fe/(fe+mg); xsit2 = (si-2)/2; xalt2 = (2-2*xsit2)/2; If[xalt2 < 0, xalt2 = 0];
          ret = MinXHP["chl",0]];
	If[mode == FORMEL`Gtb,
	  xalm1 = alvi/3; xmgm1 = (1-xalm1)(mg/(mg+fe));		(* XAlM1, XMgM1 for gb-8  *)
	  xclin = 64 (mg/(mg+fe))^3 xmgm1^2 xalm1 xalt xsit^3 xoh^8;	(* XClin for gb-8 *) 
	  Return[{{{xs1,{aliv,alvi,sumcat,fe+mg+mn+ca+alvi+ti+fe3+cr}},ret,GtbX["chl"]}}]];	  
	Return[{{{xs1,{aliv,alvi,sumcat,fe+mg+mn+ca+alvi+ti+fe3+cr}},ret}}];
]

Wm[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,i,fe=0,mg=0,ti=0,al=0,alvi=0,aliv=0,si=0,k=0,na=0,ca=0,mn=0,ba=0,fe3=0,
	cr=0,fe2pos,f=0,cl=0,h2o=0,s=0,xsit,xalt,xalm,xmgm,xfem,xoh,xk,xna,xca,xms,xpa,sumok,ret,xv=1,ainvph,
	xalm2a,xfem2a,xmgm2a,xsit1,xalt1,xcel,xfcel,xmu,sum,xmsgb8,xcelgb8,xk1,xna1,xca1,xv1=1,xpa1,xcel1,xfcel1,xmu1,
	x,y,z,t,p,xalm2b,xfe3m2b,xtim2b,xfem2b,xmgm2b,xvm1,xfem1,xmgm1,xva,xnaa,xka,xcaa,xms2,xpa2,xma2,xcel2,xfcel2,xpyp2,
	xmsgt26,xmgcelgt26,xfecelgt26},
	oxl = {"FeO","MgO","TiO2","Al2O3","SiO2","K2O","Na2O","CaO","MnO","BaO","Fe2O3","Cr2O3","F","Cl","H2O","S"};
	xs1 = {"Al(IV)","Al(VI)","SumCat","SumOk","SumA"};
	{{fe,mg,ti,al,si,k,na,ca,mn,ba,fe3,cr,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	
	(* site allocation: (K,Na,Ca,Ba)A(Al,Fe2,Mg,Mn,Fe3,Cr,Ti)2M(Si,Al)4T O10(OH)2 *)
	
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-f-cl-h2o-s;	(* sum cations *)
	If[si < 4, aliv = 4 - si];					(* tetrahedral Al *)
	If[al-aliv > 0, alvi = al - aliv];			(* octahedral Al *)
	xsit = si/4;						(* XSi on T *)
	xalt = aliv/4;						(* XAl on T *)
	sumok=alvi+fe+mg+ti+mn+cr+fe3;				(* Sum octahedra *)
	xalm = alvi/sumok;					(* XAl on M	*)
	xmgm = mg/sumok;					(* XMg on M	*)
	xfem = fe/sumok;					(* XFe on M	*)
	If[h2o==0, xoh = 1 - ((f+cl+s)/2), xoh = h2o/(h2o+f+cl+s)];	(* XOH		*)
	xk = k/(k+na); xna = na/(k+na);	xca = ca/(na+k+ca+ba);	(* XK, XNa, XCa	*)

        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["wm"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31", 
	  xk1 = k; xna1 = na; xca1 = ca; xv1 = 1-xk1-xna1-xca1; If[xv1 < 0, xv1 = 0];
	  xalm2a = alvi-1; xmgm2a = (1-xalm2a-ti-fe3)mg/(mg+fe); xfem2a = (1-xalm2a-ti-fe3)fe/(mg+fe);
	  xsit1 = (si-2)/2; If[xsit1 < 0, xsit1 = 0]; If[xsit1 > 1, xsit1 = 1];
	  xalt1 = aliv/2;   If[xalt1 < 0, xalt1 = 0]; If[xalt1 > 1, xalt1 = 1];
	  If[xk1 > 0.5, (* musovite - phengite *)
	    xpa1 = xna1; xcel1 = xmgm2a; xfcel1 = xfem2a; xmu1 = 1-(xpa1+xcel1+xfcel1);
            ret = MinXHP["wm",0]];
	  If[xca1 > 0.5, (* margarite *)
	    xv1 = 1-xna1-xca1; If[xv1 < 0, xv1 = 0];
	    sum = xca1+xna1+xv1; xna1 = xna1/sum; xca1 = xca1/sum; xv1 = xv1/sum; (* renormalize *)
            ret = MinXHP["wm",1];	     
	    ];  
	  If[xna1 > 0.5, (* paragonite *)
	    xv1 = 1-xk1-xna1; If[xv1 < 0, xv1 = 0];
	    sum = xk1+xna1+xv1; xna1 = xna1/sum; xca1 = xca1/sum; xv1 = xv1/sum; (* renormalize *)
            ret = MinXHP["wm",2];	     
	    ];  
          ];
        If[ToString[Options[Dataset][[1, 2]]] == "HP32", 
	  x = fe/(fe+mg); y = 2-si/2; z = 1-na-k-ca; If[z<0, z=0];
	  t = ti; f = fe3; p = si+ti+al+fe+fe3+mg-6;
	  xsit1 = 1-y; xalt1 = y;
	  xalm2b = 1-f-t-p; xfe3m2b = f; xtim2b = t; xfem2b = x*p; xmgm2b = (1-x)p;
	  (* xalm2a = y+z-t-ca-p; *) xfem2a = x(1-2y-z+t+ca+p); xmgm2a = (1-x)(1-2y-z+t+ca+p);
	  xalm2a = 1-xfem2a-xmgm2a;
	  xvm1 = 1-p; xfem1 = x*p; xmgm1 = (1-x)p;
	  xva = z; xnaa = na; xka = 1-z-na-ca; xcaa = ca;
	  xms2 = 2y-na-2ca-2t-f-p; xpa2 = na; xma2 = ca; xcel2= (1-x)(1+3p+t+ca-2y-z)-3p;
	  xfcel2 = x(1+3p+t+ca-2y-z); xpyp2 = z;	   	  
          ret = MinXHP["wm",3];	     
          ];
	If[mode == FORMEL`Gtb,
	  xms = (k/(k+na+ca+ba))((alvi-na)/(fe+mg+mn+ti+alvi+fe3)); (* gt-8: XMs for plag-ms thermometer *)
	  xpa = na/(na+k+ca+ba);				    (* gt-8: XPa for plag-ms thermometer *)
	  xv = (1-(si+ti+al+fe+fe3+mg-6)); If[xv > 1, xv = 1];
	  xmsgb8 = 9.48 xk xalm^2 xv xalt xsit^3 xoh^2;		(* XMs for gb-8 *)
	  xcelgb8 = 4 xk xmgm xalm xv xsit^4 xoh^2;		(* XCel for gb-8 *)	  
	  ainvphe = ((alvi/2)(4-si))/((mg/2)(si-2));		(* a(inv.phe) for GB10 *)	  
	  xmsgt26 = 4 xk xalm2a xalt1 xsit1;			(* X(Ms) for gt-26 *)
	  xmgcelgt26 = xk xmgm2a xsit1^2;			(* X(MgCel) for gt-26 *)
	  xfecelgt26 = xk xfem2a xsit1^2;			(* X(FeCel) for gt-26 *)	  		  	  	 
	  Return[{{{xs1,{aliv,alvi,sumcat,sumok,k+na+ca+ba}},ret,GtbX["wm"]}}]];
	Return[{{{xs1,{aliv,alvi,sumcat,sumok,k+na+ca+ba}},ret}}];
]

Grt[ci_,ox_,o_,t_,fe3rec_,mode_] := Block[{cil=ci,oxl,oxx=ox,xs1,i,fe2=0,fe2pos,fe3=0,fe3flag=0,ret,xpy,xalm,xgr,xsp,xandr,
	mg=0,ca=0,mn=0,si=0,al=0,cr=0,fe3r="NoCalculation",sumcat,xfe,xmg,xca,xmn,xsi,xal,xfe3,xalgb14,xcrgb14},
	oxl = {"FeO","MgO","CaO","MnO","SiO2","Al2O3","Fe2O3","Cr2O3"};
	xs1 = {"SumCat","Sum(Fe+Mg+Ca+Mn)","Fe3","Fe3CalcMode"};
	{{fe2,mg,ca,mn,si,al,fe3,cr},fe2pos} = FindElementOrder[ox,ci,oxl];
	If[fe3 > 0, fe3flag = 1];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* Sum cations *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, (* do Fe3+ recalculation according to Droop (1987) *)
	  If[sumcat > t, fe3 = 2o(1-t/sumcat);		
	   cil = cil t/sumcat; 
	   If[fe3 > cil[[fe2pos]], fe3=cil[[fe2pos]]; cil[[fe2pos]]=0, cil[[fe2pos]] = cil[[fe2pos]]-fe3]]; 
	   cil = Append[cil,fe3]; oxx = Append[ox,"Fe2O3"]];
	{{fe2,mg,ca,mn,si,al,fe3,cr},fe2pos} = FindElementOrder[oxx,cil,oxl];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* new sum of cations *)
	xsi = si/3; If[xsi > 1, xsi = 1];	(* XSi  *)
	xal = al/2; If[xal > 1, xal = 1];	(* XAl  *)
	xfe3 = fe3/2; If[xfe3 > 1, xfe3 = 1];	(* XFe(3+)  *)
	xal = xal/(xal+xfe3); xfe3 = xfe3/(xal+xfe3);	(* normalize to unity *)
	xfe = fe2/(fe2+mg+mn+ca);		(* XFe	*)
	xmg = mg/(fe2+mg+mn+ca);		(* XMg	*)
	xca = ca/(fe2+mg+mn+ca);		(* XCa	*)
	xmn = mn/(fe2+mg+mn+ca);		(* XMn	*)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, fe3r = "Droop"; cil = Delete[cil,Dimensions[cil][[1]]]];
        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["grt"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
          xpy = xmg; xalm = xfe; xsp = xmn; xandr = xfe3; xgr = (2ca-3fe3)/(2(ca+fe2+mg+mn)); 
          xpy = xpy/(xpy+xalm+xsp+xandr+xgr); xalm = xalm/(xpy+xalm+xsp+xandr+xgr);
          xsp = xsp/(xpy+xalm+xsp+xandr+xgr); xandr = xandr/(xpy+xalm+xsp+xandr+xgr);
          xgr = xgr/(xpy+xalm+xsp+xandr+xgr);
          ret = MinXHP["grt",0]];
	If[mode == FORMEL`Gtb, (* thermobarometric-specific parameters  *)
	  xalgb14 = al/(al+cr); xcrgb14 = cr/(al+cr);
	  Return[{cil,{{{xs1,{sumcat,fe2+mg+ca+mn,fe3,fe3r}}, ret, GtbX["grt"]}}}]];
	  Return[{cil,{{{xs1,{sumcat,fe2+mg+ca+mn,fe3,fe3r}}, ret}}}];	
]
	
Stau[ci_,ox_,mode_] := Block[{cil=ci,sumcat,oxl,xs1,i,fe=0,mg=0,mn=0,zn=0,f=0,cl=0,h2o=0,s=0,fe2pos,xfe,xmg,xmn,xzn,ret},
	oxl = {"FeO","MgO","MnO","ZnO","F","Cl","H2O","S"};
	xs1 = {"SumCat","Sum(Fe+Mg+Mn+Zn)"};
	{{fe,mg,mn,zn,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}]-f-cl-h2o-s;	(* Sum cations *)
	xfe = fe/(fe+mg+mn+zn);		(* XFe		*)
	xmg = mg/(fe+mg+mn+zn);		(* XMg		*)
	xmn = mn/(fe+mg+mn+zn);		(* XMn		*)
	xzn = zn/(fe+mg+mn+zn);		(* XZn		*)
	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["stau"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
          ret = MinXHP["stau",0]];
	If[mode == FORMEL`Gtb,
	  Return[{{{xs1,{sumcat,fe+mg+mn+zn}},ret,GtbX["stau"]}}]];
	Return[{{{xs1,{sumcat,fe+mg+mn+zn}},ret}}];
]

Ctd[ci_,ox_,o_,t_,fe3rec_,mode_] := Block[{sumcat,cil=ci,oxl,oxx=ox,xs1,i,fe2=0,fe2pos,fe3=0,fe3flag=0,mg=0,mn=0,al=0,si=0,
	f=0,cl=0,h2o=0,s=0,xfe,xmg,xmn,fe3r="NoCalculation",ret,alvi,xalm1,xfe3m1},
	oxl = {"FeO","MgO","MnO","Fe2O3","Al2O3","SiO2","F","Cl","H2O","S"};
	xs1 = {"SumCat","Sum(Fe+Mg+Mn)","Fe3","Fe3CalcMode"};
	{{fe2,mg,mn,fe3,al,si,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	If[fe3 > 0, fe3flag = 1];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}]-f-cl-h2o-s;	(* Sum cations *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, (* do Fe3+ recalculation according to Droop (1987) *)
	  If[sumcat > t, fe3 = 2o(1-t/sumcat); 		
	   cil = cil t/sumcat; 
	   If[fe3 > cil[[fe2pos]], fe3=cil[[fe2pos]]; cil[[fe2pos]]=0, cil[[fe2pos]] = cil[[fe2pos]]-fe3]]; 
	   cil = Append[cil,fe3]; oxx = Append[ox,"Fe2O3"]];
	{{fe2,mg,mn,fe3,al,si,f,cl,h2o,s},fe2pos} = FindElementOrder[oxx,cil,oxl];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}]-f-cl-h2o-s;	(* new sum of cations *)
	xfe = fe2/(fe2+mg+mn);				(* XFe	*)
	xmg = mg/(fe2+mg+mn);				(* XMg	*)
	xmn = mn/(fe2+mg+mn);				(* XMn	*)

	If[fe3rec == FORMEL`Droop && fe3flag == 0, fe3r = "Droop"; cil = Delete[cil,Dimensions[cil][[1]]]];

	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["ctd"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
	  aliv = 1-si; If[aliv < 0, aliv = 0]; 		(* Al(IV) *)
	  alvi = al - aliv;				(* Al(VI) *)
	  xalm1 = alvi-1; If[xalm1 < 0, xalm1 = 0];	(* XAl on M1 *)
	  xfe3m1 = fe3;					(* XFe(3+) on M1 *)
          ret = MinXHP["ctd",0]];
	If[mode == FORMEL`Gtb,
	  Return[{cil,{{{xs1,{sumcat,fe2+mg+mn,fe3,fe3r}}, ret, GtbX["ctd"]}}}]];
	Return[{cil,{{{xs1,{sumcat,fe2+mg+mn,fe3,fe3r}}, ret}}}];
]

Crd[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,i,fe=0,mg=0,mn=0,fe2pos,xfe,xmg,xmn,ret,d=1*10^-7},
	oxl = {"FeO","MgO","MnO"};
	xs1 = {"SumCat","Sum(Fe+Mg+Mn)"};
	{{fe,mg,mn},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}];	(* Sum cations *)
	xfe = fe/(fe+mg+mn);		(* XFe on M  *)
	xmg = mg/(fe+mg+mn);		(* XMg on M  *)
	xmn = Chop[mn/(fe+mg+mn),d];	(* XMn on M  *)

	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["crd"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",ret = MinXHP["crd",0]];
	If[mode == FORMEL`Gtb,
	  Return[{{{xs1,{sumcat,fe+mg+mn}},ret,GtbX["crd"]}}]];
	Return[{{{xs1,{sumcat,fe+mg+mn}},ret}}];
]

Ol[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,i,fe=0,mg=0,mn=0,ca=0,si=0,ti=0,al=0,ni=0,fe2pos,xfe,xmg,ret,xfo,xfa},
	oxl = {"FeO","MgO","MnO","CaO","SiO2","TiO2","Al2O3","NiO"};
	xs1 = {"SumCat","Sum(Fe+Mg+Mn+Ca)"};
	{{fe,mg,mn,ca,si,ti,al,ni},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}];	(* Sum cations *)
	xfe = fe/(fe+mg+mn+ca+ti+al+ni);			(* XFe  on M   *)
	xmg = mg/(fe+mg+mn+ca+ti+al+ni);			(* XMg  on M    *)
        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["ol"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32", 
          xfo = mg/(mg+fe); xfa = fe/(mg+fe); ret = MinXHP["ol",0]];
	If[mode == FORMEL`Gtb,
	  Return[{{{xs1,{sumcat,fe+mg+mn+ca}},ret,GtbX["ol"]}}]];
	Return[{{{xs1,{sumcat,fe+mg+mn+ca}},ret}}];
]					

Fsp[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,ca=0,na=0,k=0,i,fe2pos=0,xk,xna,xca,ret},
	oxl = {"K2O","Na2O","CaO"};
	xs1 = {"SumCat"};
	{{k,na,ca},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}];	(* Sum cations *)
	xk = k/(k+na+ca);			(* XK	*)
	xca = ca/(k+na+ca);			(* XCa	*)
	xna = na/(k+na+ca);			(* XNa	*)

	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["fsp"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
          If[xk < 0.05, ret = MinXHP["fsp",0], ret = MinXHP["fsp",1]];
          ];
	If[mode == FORMEL`Gtb,
	  Return[{{{xs1,{sumcat}},ret,GtbX["fsp"]}}]]; 
	Return[{{{xs1,{sumcat}},ret}}];
]
	
Ep[ci_,ox_] := Block[{sumcat,oxl,xs1,i,al=0,fe3=0,f=0,cl=0,si=0,ca=0,h2o=0,s=0,aliv,alvi,
	xca,xoh,xsit,xalt,xalm3,xfe3m3,xalm12,xfe3m12,fe2pos,ret,xfe3},
	oxl = {"Al2O3","Fe2O3","F","Cl","SiO2","CaO","H2O","S"};
	xs1 = {"Al(IV)","Al(VI)","SumCat","XFe(3+)"};
	{{al,fe3,f,cl,si,ca,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-f-cl-h2o-s;	(* Sum cations *)
	(* site allocation: (Ca)2A(Al,Fe3)2M12(Al,Fe3)M3(Si,Al)3T   *)
	If[si < 3, aliv = 3 - si, aliv = 0];			(* tetrahedral Al	*)
	If[al-aliv > 0, alvi = al - aliv];			(* octahedral Al	*)
	xsit = si/3; If[xsit > 1, xsit = 1];			(* XSi on T *)
	xfe3 = fe3/(fe3+alvi-1); 				(* XFe(3+) for HP o/d *)
	If[h2o==0,xoh = 1-(f+cl+s), xoh=h2o/(h2o+f+cl+s)];	(* X-OH  *)
	If[ca/2 < 1, xca = ca/2, xca = 1];			(* XCa  *)
	If[al >= 2 && fe3 <= 1, xalm3 = al-2; xfe3m3 = fe3; xalm12 = 1; xfe3m12 = 0]; 	
	If[fe3 > 1 && al < 2, xalm3 = 0; xfe3m3 = 1; xalm12 = al/2; xfe3m12 = (fe3-1)/2];
	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["zoep"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32", ret = MinXHP["zoep",0]];		
	Return[{{{xs1,{aliv,alvi,sumcat,xfe3}},ret}}];
]

Cal[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,i,fe=0,mg=0,mn=0,ca=0,co2=0,fe2pos,xca,xmg,xfe,xmn,ret},
	oxl = {"FeO","MgO","MnO","CaO","CO2"};
	xs1 = {"SumCat"};
	{{fe,mg,mn,ca,co2},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-co2;	(* Sum cations *)
	xca = ca/(ca+mg+fe+mn);		(* XCa  *)
	xmg = mg/(ca+mg+fe+mn);		(* XMg  *)
	xfe = fe/(ca+mg+fe+mn);		(* XFe  *)
	xmn = mn/(ca+mg+fe+mn);		(* XMn  *)
	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["cal"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32", ret = MinXHP["cal",0]];	 
	If[mode == FORMEL`Gtb,
	  Return[{{{xs1,{sumcat}}, ret, GtbX["cal"]}}]];
	Return[{{{xs1,{sumcat}}, ret}}];
]

Dol[ci_,ox_] := Block[{sumcat,oxl,xs1,i,fe=0,mg=0,mn=0,ca=0,co2=0,fe2pos,xca,xmg,xfe,xmn,ret,xcam2,xmgm1,xfem1},
	oxl = {"FeO","MgO","MnO","CaO","CO2"};
	xs1 = ToExpression["{SumCat}"];
	{{fe,mg,mn,ca,co2},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-co2;	(* Sum cations *)	
	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["dol"];
	  xca = ca/(ca+mg+fe+mn);		(* XCa  *)
	  xmg = mg/(ca+mg+fe+mn);		(* XMg  *)
	  xfe = fe/(ca+mg+fe+mn);		(* XFe  *)
	  xmn = mn/(ca+mg+fe+mn)];		(* XMn  *)		  
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32", ret = MinXHP["dol",0];
          xcam2 = ca; If[xcam2 > 1, xcam2 = 1]; (* XCa on M2 *)
          xmg = mg/(mg+fe);
          xmgm1 = (1-mn)xmg; If[xmgm1 > 1, xmgm1 = 1];		(* XMg on M1 *) 
          xfem1 = (1-mn)(1-xmg); If[xfem1 > 1, xfem1 = 1]];	(* XFe on M1 *)          
	Return[{{{xs1,{sumcat}},ret}}];
]

Sp[ci_,ox_,o_,t_,fe3rec_,mode_] := Block[{cil=ci,sumcat,suma,sumb,oxl,oxx=ox,xs1,i,fe2pos,fe2=0,fe3=0,ret,xsp,xherc,xmt,
	fe3flag=0,mg=0,al=0,zn=0,mn=0,ti=0,ni=0,cr=0,v=0,xfe3a,xfe3b,xalb,xfe2a,xfe2b,xmga,fe3r="NoCalculation"},
	oxl = {"FeO","MgO","Al2O3","ZnO","MnO","TiO2","NiO","Cr2O3","V2O3","Fe2O3"};
	xs1 = {"SumCat","SumA","SumB","Fe3","Fe3CalcMode"};
	{{fe2,mg,al,zn,mn,ti,ni,cr,v,fe3},fe2pos} = FindElementOrder[ox,ci,oxl];
	If[fe3 > 0, fe3flag = 1];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* Sum cations *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, (* do Fe3+ recalculation according to Droop (1987) *)
	  If[sumcat > t, fe3 = 2o(1-t/sumcat); 		
	   cil = cil t/sumcat; 
	   If[fe3 > cil[[fe2pos]], fe3=cil[[fe2pos]]; cil[[fe2pos]]=0, cil[[fe2pos]] = cil[[fe2pos]]-fe3]]; 
	   cil = Append[cil,fe3]; oxx = Append[ox,"Fe2O3"]];
	{{fe2,mg,al,zn,mn,ti,ni,cr,v,fe3},fe2pos} = FindElementOrder[oxx,cil,oxl];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* new sum of cations *)
	
	If[fe3rec == FORMEL`Droop && fe3flag == 0, fe3r = "Droop"; cil = Delete[cil,Dimensions[cil][[1]]]];
	xmga = mg;				(* XMg on A  *)
	xalb = al/2; If[xalb > 1, xalb = 1];	(* XAl on B *)

	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", 
	  (* site allocation: (Fe2,Mg,Mn,1/2Fe3+,Zn)1A (Fe2,Al,Cr,Ti,V,1/2Fe3+)2B *)	
	  xfe2b = (2-cr-v-al-ti-0.5*fe3)/2; If[xfe2b < 0,xfe2b = 0];	(* XFe(2+) on B *)	  
	  xfe3b = (0.5*fe3)/2;						(* XFe(3+) on B *)
	  xfe2a = fe2 - 2xfe2b;	If[xfe2a < 0,xfe2a = 0];		(* XFe(2+) on A *)
	  xfe3a = 0.5*fe3; If[xfe3a > 1, xfe3a = 1]; 			(* XFe(3+) on A *)
	  suma = xfe2a+mg+mn+xfe3a+zn;
	  sumb = 2xfe2b+al+cr+ti+v+2xfe3b;
	  ret = MinXB["spin"];	
	  ];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
          xfe2a = xherc = fe2;						(* XFe(2+) on A *)
          xfe3b = xmt = fe3/2; If[xfe3b > 1, xfe3b = 1];		(* XFe(3+) on B *)
          xsp = xmga;
          suma = xfe2a+xmga+mn+zn; sumb = fe3+al+cr+ti+v;
          If[al < 1.0, xsp = xherc = xmt = 0]; (* set proportions to 0, because activity is ideal *)
          ret = MinXHP["spin",0];
          ];
	If[mode == FORMEL`Gtb,
	  Return[{cil,{{{xs1,{sumcat,suma,sumb,fe3,fe3r}},ret, GtbX["spin"]}}}]];
	Return[{cil,{{{xs1,{sumcat,suma,sumb,fe3,fe3r}},ret}}}];
]

Saph[ci_,ox_,o_,t_,fe3rec_] := Block[{cil=ci,sumcat,sumok,oxl,oxx=ox,xs1,i,si=0,fe2pos,fe2=0,fe3=0,ret,xalt,xsit,xalm,xmgm,xfem,
	fe3flag=0,mg=0,al=0,zn=0,mn=0,ti=0,cr=0,aliv=0,alvi=0,xfe2,xfe3,xmg,xal,fe3r="NoCalculation"},
	oxl = {"SiO2","FeO","MgO","Al2O3","ZnO","MnO","TiO2","Cr2O3","Fe2O3"};
	xs1 = {"Al(IV)","Al(VI)","SumCat","SumOk","Fe3","Fe3CalcMode"};
	{{si,fe2,mg,al,zn,mn,ti,cr,fe3},fe2pos} = FindElementOrder[ox,ci,oxl];
	If[fe3 > 0, fe3flag = 1];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* Sum cations *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, (* do Fe3+ recalculation according to Droop (1987) *)
	  If[sumcat > t, fe3 = 2o(1-t/sumcat); 		
	   cil = cil t/sumcat; 
	   If[fe3 > cil[[fe2pos]], fe3=cil[[fe2pos]]; cil[[fe2pos]]=0, cil[[fe2pos]] = cil[[fe2pos]]-fe3]]; 
	   cil = Append[cil,fe3]; oxx = Append[ox,"Fe2O3"]];
	{{si,fe2,mg,al,zn,mn,ti,cr,fe3},fe2pos} = FindElementOrder[oxx,cil,oxl];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* new sum of cations *)
	If[si<6,aliv = 6-si];					(* Al-IV *)
	alvi = al-aliv;						(* Al-VI *)
	sumok = alvi+fe2+fe3+mg+mn+ti+cr+zn;			(* Sum(Ok) *)
	xfe2 = fe2/sumok;					(* XFe(2+) Ok *)
	xfe3 = fe3/sumok;					(* XFe(3+) Ok *)
	xmg = mg/sumok;						(* XMg Ok     *)
	xal = alvi/sumok;					(* XFe(3+) Ok *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, fe3r = "Droop"; cil = Delete[cil,Dimensions[cil][[1]]]];
	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["saph"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
          (* site filling: 6T: T1:Si, T2:Al, T3-T6:(Si,Al); 8M: M1-M3:Mg, M4:Al, M5-M8:(Mg,Al) *)
	  If[aliv > 1, xalt = (aliv-1)/4, xalt = 0]; If[xalt > 1, xalt = 1];
	  If[si > 1, xsit = (si-1)/4, xsit = 0]; If[xsit > 1, xsit = 1];
	  If[alvi > 1, xalm = (alvi-1)/4, xalm = 0]; If[xalm > 1, xalm = 1];	  
	  xmg = mg/(mg+fe2);
	  If[mg+fe2 > 3, xmgm = (mg+fe2-3)xmg/4; xfem = (mg+fe2-3)(1-xmg)/4, xmgm = 0; xfem = 0]; 
	  If[xmgm > 1, xmgm = 1]; If[xfem > 1, xfem = 1];
          ret = MinXHP["saph",0];
          ];
	Return[{cil,{{{xs1,{aliv,alvi,sumcat,sumok,fe3,fe3r}},ret}}}]
]

Ilm[ci_,ox_,o_,t_,fe3rec_,mode_] := Block[{cil=ci,sumcat,oxl,oxx=ox,xs1,i,si=0,fe2pos,fe2=0,fe3=0,fe3flag=0,mg=0,al=0,v=0,mn=0,
	ti=0,cr=0,ca=0,fe3b=0,fe3a=0,xfe2a,xmna,xmga,xfe3a,xfe3b,sum,xtib,fe3r="NoCalculation",ret},
	oxl = {"SiO2","FeO","MgO","Al2O3","V2O3","MnO","TiO2","Cr2O3","Fe2O3","CaO"};
	xs1 = {"SumCat","Sum(Fe2+Fe3+Mg+Mn+Ca)A","Fe3","Fe3CalcMode"};
	{{si,fe2,mg,al,v,mn,ti,cr,fe3,ca},fe2pos} = FindElementOrder[ox,ci,oxl];
	If[fe3 > 0, fe3flag = 1];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* Sum cations *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, (* do Fe3+ recalculation according to Droop (1987) *)
	  If[sumcat > t, fe3 = 2o(1-t/sumcat); 		
	   cil = cil t/sumcat; 
	   If[fe3 > cil[[fe2pos]], fe3=cil[[fe2pos]]; cil[[fe2pos]]=0, cil[[fe2pos]] = cil[[fe2pos]]-fe3]]; 
	   cil = Append[cil,fe3]; oxx = Append[ox,"Fe2O3"]];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* new sum of cations *)
	{{si,fe2,mg,al,v,mn,ti,cr,fe3,ca},fe2pos} = FindElementOrder[oxx,cil,oxl];
		
	(* site allocation: (Fe2,Mg,Mn,Ca,Ni,Fe3)A(Ti,Al,Fe3,Si,Cr,V)B O3  *)
	xtib = ti; If[xtib > 1, xtib = 1];
	If[ti+si+al+v+cr < 1, fe3b = 1-(ti+si+al+v+cr)];
	xfe3b = fe3b; fe3a = fe3-fe3b; xfe3a = fe3a; 
	sum = fe2+fe3a+mg+mn+ca; xfe2a = fe2; xmna = mn; xmga = mg;
	If[fe3rec == FORMEL`Droop && fe3flag == 0, fe3r = "Droop"; cil = Delete[cil,Dimensions[cil][[1]]]];
	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["fetiox"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",ret = MinXHP["fetiox",0]];
	If[mode == FORMEL`Gtb,
	  Return[{cil,{{{xs1,{sumcat,sum,fe3,fe3r}},ret,GtbX["fetiox"]}}}]];
	Return[{cil,{{{xs1,{sumcat,sum,fe3,fe3r}},ret}}}]
]

Sphen[ci_,ox_] := Block[{oxl,xs,xs1,i,sumcat,fe2pos,ca=0,ti=0,xca,xti,ret},
	oxl = {"CaO","TiO2"};
	xs1 = {"SumCat"};
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}];	(* Sum cations *)
	{{ca,ti},fe2pos} = FindElementOrder[ox,ci,oxl];
	xca = ca; xti = ti;
	If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["sphen"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",ret = MinXHP["sphen",0]];
	Return[{{{xs1,{sumcat}},ret}}];
]

Talc[ci_,ox_] := Block[{sumcat,oxl,xs,xs1,i,fe=0,mg=0,ti=0,al=0,alvi=0,aliv=0,si=0,ca=0,mn=0,fe3=0,cr=0,
	f=0,cl=0,h2o=0,s=0,xfem,xmgm,xalm,xoh,xalt,xsit,fe2pos,ret,xalm3,xsit1,xalt1},
	oxl = {"FeO","MgO","TiO2","Al2O3","SiO2","CaO","MnO","Fe2O3","Cr2O3","F","Cl","H2O","S"};
	xs1 = {"Al(IV)","Al(VI)","SumCat","SumOk"};
	{{fe,mg,ti,al,si,ca,mn,fe3,cr,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-f-cl-h2o-s;	(* sum cations *)

	(* site allocation: simple model assuming 3 identical M-sites and 4 identical T-sites;
	   (Fe2,Mg,Mn,Ca,Al,Cr,Fe3,Ti,Vac)3M(Si,Al)4T O10(OH)2 *)
	If[si < 4, aliv = 4 - si];				(* tetrahedral Al	*)
	If[al-aliv > 0, alvi = al - aliv];			(* octahedral Al	*)
	xfem = fe/(fe+mg+mn+ca+alvi+ti+fe3+cr);			(* XFe	on M  	*)
	xmgm = mg/(fe+mg+mn+ca+alvi+ti+fe3+cr);			(* XMg	on M   	*)
	xalm = alvi/(fe+mg+mn+ca+alvi+ti+fe3+cr);		(* XAl  on M 	*)
	If[h2o==0, xoh = 1 - ((f+cl+s)/2), xoh = h2o/(h2o+f+cl+s)];	(* XOH		*)
	xsit = si/4; xalt = aliv/4;				(* XSi on T, XAl on T  *)
        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["ta"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",
	  xalm3 = alvi; xsit1 = (si-2)/2; xalt1 = (4-si)/2; If[xsit1 > 1, xsit1 = 1; xalt1 = 0];
          ret = MinXHP["ta",0]];
	Return[{{{xs1,{aliv,alvi,sumcat,fe+mg+mn+ca+alvi+ti+fe3+cr}},ret}}];
]

AmphSiteDistribution[el_] :=
	Block[{tet,alt=0,alc=0,tit=0,tic=0,csum=0,mgc=0,mgb=0,fe2c=0,fe2b=0,mnc=0,
	mnb=0,znc=0,znb=0,nic=0,nib=0,coc=0,cob=0,lic=0,lib=0,bsum=0,asum=0,cab=0,caa=0,nab=0,naa=0,
	ka=0,si,al,ti,zr,cr,fe3,mg,fe2,mn,zn,ni,co,li,ca,na,k,f,cl},
	{si,al,ti,zr,cr,fe3,mg,fe2,mn,zn,ni,co,li,ca,na,k,f,cl} = el;
	
	(* amphibole site filling according to Leake et al., 1997, p.625-626  *)
	
	If[si < 8, tet=si+al; (* T-site filling order: Si, Al, Ti  *)
	  If[tet < 8, tet=tet+ti;
	    If[tet < 8, alt=al;tit=ti;
	      , alt=al; tit=8-(tet-ti); tic=ti-tit];
	    , alt=8-(tet-al); alc=al-alt;tic=ti];
	  , alc=al;tic=ti];
	(* C-site filling order: excess-Al, Ti, then Zr, Cr, Fe3+, Mg, Fe2+, Mn, Zn, Ni, Co, Li *)
	csum = alc+tic+zr+cr+fe3+mg;
	If[csum < 5, csum=csum+fe2;
	  If[csum < 5, csum=csum+mn;	
	    If[csum < 5, csum=csum+zn;
	      If[csum < 5, csum=csum+ni;
	        If[csum < 5, csum=csum+co;
	          If[csum < 5, csum=csum+li;
	            If[csum < 5, mgc=mg;fe2c=fe2;mnc=mn;znc=zn;nic=ni;coc=co;lic=li;
	        	   ,mgc=mg;fe2c=fe2;mnc=mn;znc=zn;nic=ni;coc=co;lic=5-(csum-li);lib=li-lic];
		        ,mgc=mg;fe2c=fe2;mnc=mn;znc=zn;nic=ni;coc=5-(csum-co);cob=co-coc;lib=li];
		      ,mgc=mg;fe2c=fe2;mnc=mn;znc=zn;nic=5-(csum-ni);nib=ni-nic;cob=co;lib=li];
		    ,mgc=mg;fe2c=fe2;mnc=mn;znc=5-(csum-zn);znb=zn-znc;nib=ni;cob=co;lib=li];
		  ,mgc=mg;fe2c=fe2;mnc=5-(csum-mn);mnb=mn-mnc;znb=zn;nib=ni;cob=co;lib=li];	    
		, mgc=mg;fe2c=5-(csum-fe2);fe2b=fe2-fe2c;mnb=mn;znb=zn;nib=ni;cob=co;lib=li];
	  ,mgc=5-(csum-mg);mgb=mg-mgc;fe2b=fe2;mnb=mn;znb=zn;nib=ni;cob=co;lib=li];  
	(* B-site filling: order: excess-Mg,Fe2+,Mn,Zn,Ni,Co,Li, then Ca, Na  *)
	bsum = mgb+fe2b+mnb+znb+nib+cob+lib+ca; 
	If[bsum < 2, bsum=bsum+na;
	  If[bsum < 2, cab=ca; nab=na;
	    , cab=ca;nab=2-(bsum-na);naa=na-nab];
	  , cab=2-(bsum-ca);caa=ca-cab;naa=na];
	tet = si+alt;
	csum = alc+tic+zr+cr+fe3+mgc+fe2c+mnc+znc+nic+coc+lic;
	bsum = mgb+fe2b+mnb+znb+nib+cob+lib+cab+nab;
	asum = caa+naa; ka=k;
	Return[{si,alt,tit,alc,tic,zr,cr,fe3,mgc,fe2c,mnc,znc,nic,coc,lic,mgb,fe2b,mnb,znb,nib,cob,
	    lib,cab,caa,nab,naa,ka,tet,csum,bsum,asum}];
]

FindAmphName[si_,al_,ti_,zr_,cr_,fe3_,mg_,fe2_,mn_,zn_,ni_,co_,li_,ca_,na_,k_,lib_,cab_,caa_,nab_,
	alc_,cl_,f_,naa_,ka_] :=
	Block[{group="nogroup",name="noname",x,y,praefix=""},
	(* Find amphibole group *)
	If[cab+nab < 1 && mg+fe2+mn+zn+ni+co+li >= 1, group = "Mg-Fe-Mn-Li-group"];
	If[cab+nab >= 1 && nab < 0.5, group = "calcic-group"];
	If[cab+nab >= 1 && nab > 0.5 && nab < 1.5, group = "sodic-calcic-group"];
	If[nab >= 1.5, group = "sodic-group"];

    If[mg+fe2 > 0, x = mg/(mg+fe2)]; 	(* Mg/(Mg+Fe(2+))  *)
    If[mg+mn > 0, y = mg/(mg+mn)]; 	(* Mg/(Mg+Mn)  *)
    
	(* define praefixes  *)	
	If[cl > 1, praefix = "chloro"];
	If[cr > 1, praefix = "chromio"];
	If[f > 1, praefix = "fluoro"];
	If[mn >= 1 && mn < 3, praefix = "mangano"];
	If[mn >= 3 && mn < 5, praefix = "permangano"];
	If[k > 0.5, praefix = "potassic"];
	If[ti > 0.5, praefix = "titano"];
	If[zn > 1, praefix = "zinco"];
	
	If[group == "Mg-Fe-Mn-Li-group",
	  If[na > 0.5, praefix = "sodic"];
	  If[fe3 > 1, praefix = "ferri"];
	  If[lib < 1,
        If[si >= 7,
          If[x > 0.5, name = "{anthophyllite, cummingtonite}"];
          If[x <= 0.5, name = "{ferroanthophyllite, grunerite}"]];
        If[si < 7,
          If[x > 0.5, name = "gedrite"];
          If[x <= 0.5, name = "ferrogedrite"]];
        ];
      If[lib >= 1,
        If[si >= 7,
          If[x > 0.5, name = "{holmquistite, clinoholmquistite}"];
          If[x <= 0.5, name = "{ferroholmquistite, clinoferroholmquistite}"]];
        ];
	  ];
	
	If[group == "calcic-group",
	  If[alc > 1, praefix = "alumino"];
	  If[fe3 > 1, praefix = "ferri"];
	  If[cab >= 0.5 && naa+ka >= 0.5,
		If[ti >= 0.5,
		  If[si >= 5.5 && si <= 6.5,
            If[x > 0.5, name = "kaersutite"];
            If[x <= 0.5, name = "ferrokaersutite"];
		    ];		
		  ];
		If[ti < 0.5,
		  If[si >= 4.5 && si < 5.5,
            If[x > 0.5, name = "magnesiosadanagaite"];
            If[x <= 0.5, name = "sadanagaite"];
		    ];		
		  If[si >= 5.5 && si < 6.5,
            If[x > 0.5, If[alc >= fe3, name = "pargasite"]; If[alc < fe3, name = "magnesiohastingsite"]];
            If[x <= 0.5, If[alc >= fe3, name = "ferropargasite"]; If[alc < fe3, name = "hastingsite"]];
		    ];		
		  If[si >= 6.5,
            If[x > 0.5, name = "edenite"];
            If[x <= 0.5, name = "ferroedenite"];
		    ];		
		  ];		  	  
	    ];
	  If[cab >= 0.5 && naa+ka < 0.5,
		If[caa < 0.5,
		  If[si >= 5.5 && si < 6.5,
            If[x > 0.5, name = "tschermakite"];
            If[x <= 0.5, name = "ferrotschermakite"];
		    ];		
		  If[si >= 6.5 && si < 7.5,
            If[x > 0.5, name = "magnesiohornblende"];
            If[x <= 0.5, name = "ferrohornblende"];
		    ];		
		  If[si >= 7.5,
            If[x > 0.9, name = "tremolite"];
            If[x <= 0.9 && x > 0.5, name = "actinolite"];
            If[x <= 0.5, name = "ferroactinolite"];
		    ];		
		  ];
		If[caa >= 0.5, name = "canniloite"];
	    ];
	  ];
	  
	If[group == "sodic-calcic-group",
	  If[alc > 1, praefix = "alumino"];
	  If[fe3 > 1, praefix = "ferri"];
	  If[naa+ka >= 0.5,
		If[si >= 5.5 && si < 6.5,
          If[x > 0.5, name = "magnesiotaramite"];
          If[x <= 0.5, name = "taramite"];
	      ];		
		If[si >= 6.5 && si < 7.5,
          If[x > 0.5, name = "magnesiokatophorite"];
          If[x <= 0.5, name = "katophorite"];
		  ];		
		If[si >= 7.5,
          If[x > 0.5, name = "richterite"];
          If[x <= 0.5, name = "ferrorichterite"];
		  ];		
	    ];
	  If[naa+ka < 0.5,
		If[si >= 6.5 && si < 7.5,
          If[x > 0.5, name = "barroisite"];
          If[x <= 0.5, name = "ferrobarroisite"];
		  ];		
		If[si >= 7.5,
          If[x > 0.5, name = "winchite"];
          If[x <= 0.5, name = "ferrowinchite"];
		  ];			  
	    ];
	  If[name == "kaersutite" && praefix == "titano", praefix = ""]; 
	  ];

	If[group == "sodic-group",
	  If[mg+fe2+mn > 2.5 && li < 0.5,
		If[mg > mn || fe2 > mn,
		  If[naa+ka < 0.5,
            If[x > 0.5, 
              If[alc >= fe3, name = "glaucophane"]; 
              If[alc < fe3, name = "magnesioriebeckite"];
              ];
            If[x <= 0.5, 
              If[alc >= fe3, name = "ferroglaucophane"]; 
              If[alc < fe3, name = "riebeckite"];
              ];
		    ];		
		  If[naa+ka >= 0.5,
		    If[si >= 6.5 && si < 7.5,
              If[x > 0.5, If[alc >= fe3, name = "nyboeite"]; If[alc < fe3, name = "ferric-nyboeite"]];
              If[x <= 0.5, If[alc >= fe3, name = "ferronyboeite"]; If[alc < fe3, name = "ferric-ferronyboeite"]];
		      ];		
		    If[si >= 7.5,
              If[x > 0.5, If[alc >= fe3, name = "eckermannite"]; If[alc < fe3, name = "magnesioarfvedsonite"]];
              If[x <= 0.5, If[alc >= fe3, name = "ferroeckermannite"]; If[alc < fe3, name = "arfvedsonite"]];
		      ];		
		    ];		
		  ];	  
		If[mg > fe2 || mn > fe2,
		  If[naa+ka >= 0.5,
		    If[si >= 7.5,
              If[y > 0.5, If[alc >= fe3, name = "eckermannite"]; If[alc < fe3, name = "magnesioarfvedsonite"]];
              If[y <= 0.5, name = "kozulite"];
		      ];				  
		    ];		
		  ];	  
	    ];
	  If[mg+fe2+mn <= 2.5 && li >= 0.5 && naa+ka >= 0.5,
		If[mg > mn || fe2 > mn,
		  If[si >= 7.5,
            If[x > 0.5, If[fe3 >= alc, name = "leakeite"]];
            If[x <= 0.5, If[fe3 >= alc,name = "ferroleakeite"]];
		    ];				  
		  ];	  
		If[mg > fe2 || mn > fe2,
		  If[si >= 7.5,
            If[y > 0.5, If[fe3 >= alc, name = "leakeite"]];
            If[y <= 0.5, If[fe3 >= alc,name = "kornite"]];
		    ];				  		
		  ];	  
	    ];
	  If[mg+fe2+mn <= 2.5 && li < 0.5 && naa+ka >= 0.5,
		If[mg > fe2 || mn > fe2,
		  If[si >= 7.5,
            If[y <= 0.5, name = "ungarettite"];
		    ];				  		
	  	  ];
	    ];
	  ];
	If[name == "kozulite" && praefix == "mangano" || name == "ungarettite" && praefix == "mangano", praefix = ""]; 
	If[name == "kozulite" && praefix == "permangano", praefix = ""]; 
	If[name == "kaersutite" && praefix == "titano" || name == "ferrokaersutite" && praefix == "titano", praefix = ""]; 
	Return[{group,StringJoin[praefix,name]}];	
]

Amph[ci_,ox_,fe3rec_,mode_] := Block[{cil=ci,oxl,xs1,el,el1,el2,elox,si=0,al=0,ti=0,cr=0,zr=0,fe3=0,fe33=0,mg=0,
	ni=0,zn=0,co=0,li=0,fe2=0,mn=0,ca=0,na=0,k=0,f=0,cl=0,h2o=0,s=0,fe2pos,fe3flag=0,sumca,sumcat,sumk,ret,
	sumal,summn,sumna,sumflag=0,si8,cat16,enk15,ecnk13,ek15,sial8,allfe3,sfe310,fe3minfac,fe3maxfac,
	alt,tit,alc,tic,mgc,fe2c,mnc,znc,nic,coc,lic,mgb,fe2b,mnb,znb,nib,cob,lib,cab,caa,nab,naa,ka,tsum,
	csum,bsum,asum,warning="",f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,name="noname",group="nogroup",name1,name2,
	xfe,xmg,xmn,dim,mgfem2,mgfem13,mgfem4,xxmgm2,xxfem2,xxmgm13,xxfem13,xxmgm4,xxfem4,res,i,j,check,sol=0,
	xva,xka,xnaa,xcam4,xnam4,xmgm4,xfem4,xmgm13,xfem13,xmgm2,xfem2,xalm2,xfe3m2,xtim2,xsit1,xalt1,xoh,
	xmnm13,xmnm4,delta=10^-7,fe3r="NoCalculation",pgl=0,pparg=0,pkpa=0,pfts=0,pts=0,pcum=0,ptia=0,pmna=0,
	pfact=0,ptr=0,sum,pfgl=0,prieb=0,pgrun=0,ptr1=0,prieb1=0,pgl1=0,pfgl1=0,pcum1=0,pgrun1=0},

	oxl = {"SiO2","Al2O3","TiO2","ZrO2","Cr2O3","Fe2O3","MgO","FeO","MnO","ZnO","NiO","CoO","Li2O","CaO","Na2O","K2O","F","Cl","H2O","S"};

	xs1 = {"Al(IV)","Al(VI)","Fe3","SumCat","CaB+NaB","NaB","NaA+KA","Mg/(Fe2+Mg)","Fe2/(Fe2+Mg)","Mg/(Mn+Mg)","group","name","Fe3CalcMode"};
	{{si,al,ti,zr,cr,fe3,mg,fe2,mn,zn,ni,co,li,ca,na,k,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	el={si,al,ti,zr,cr,fe3,mg,fe2,mn,zn,ni,co,li,ca,na,k,f,cl};
	elox = {2,1.5,2,2,1.5,1.5,1,1,1,1,1,1,0.5,1,0.5,0.5,0,0};
	If[fe3 > 0, fe3flag = 1]; (* Fe2O3 is given explicitly in the analysis *)

	(* do Fe3+ recalculation according to Leake et al. (1997) *)
	If[fe3rec == FORMEL`LeakeFe3Min && fe3flag == 0 || fe3rec == FORMEL`LeakeFe3Max && fe3flag == 0 ||
	   fe3rec == FORMEL`LeakeFe3Mean && fe3flag == 0,
	  (* calculate factors according to Leake et al., 1997, Appendix 2  *)
	  sumca = si+al+ti+cr+zr+fe3+mg+ni+zn+co+li+fe2+mn+ca;
	  sumk = sumca+na+k; sumal = si+al; summn = sumca-ca; sumna = sumca+na;
	  si8 = 8/si; cat16 = 16/sumk; enk15 = 15/sumca;
	  ecnk13 = 13/summn; ek15 = 15/sumna; sial8 = 8/sumal; allfe3 = 23/(23+0.5fe2); sfe310 = 36/(46-si-al-ti-cr);
	  fe3minfac = Min[{si8,cat16,enk15,1}];
	  fe3maxfac = Max[{ecnk13,ek15,sial8,allfe3,sfe310}];
	  If[fe3minfac < fe3maxfac, sumflag = 1; warning = " (unstoech. amph !)"];	    
	    If[sumflag == 0, {si,alt,tit,alc,tic,zr,cr,fe3,mgc,fe2c,mnc,znc,nic,coc,lic,mgb,fe2b,mnb,znb,nib,cob,
	      		      lib,cab,caa,nab,naa,ka,tsum,csum,bsum,asum} = AmphSiteDistribution[el];
	  	If[fe3rec == FORMEL`LeakeFe3Min, (* Minimum ferric estimate  *)
	  	   el=el fe3minfac; cil=ci fe3minfac;
	       fe3 = 2(23-Sum[el[[i]] elox[[i]],{i,1,Dimensions[el][[1]]}]);
	       el[[8]] = el[[8]] - fe3; el[[6]] = fe3;	
	       ];
	  	 If[fe3rec == FORMEL`LeakeFe3Max, (* Maximum ferric estimate  *)
	  	   el=el fe3maxfac; cil=ci fe3maxfac;
	       fe3 = 2(23-Sum[el[[i]] elox[[i]],{i,1,Dimensions[el][[1]]}]);
	       el[[8]] = el[[8]] - fe3; el[[6]] = fe3;	
	       ];
	  	 If[fe3rec == FORMEL`LeakeFe3Mean, (* Mean ferric estimate  *)
	  	   el=el (fe3maxfac+fe3minfac)/2; cil=ci (fe3maxfac+fe3minfac)/2;
	       fe3 = 2(23-Sum[el[[i]] elox[[i]],{i,1,Dimensions[el][[1]]}]);
	       el[[8]] = el[[8]] - fe3; el[[6]] = fe3;	
	       ]];
	    If[sumflag == 1, fe3 = 0; fe3r = "NoCalculationPossible"]
	    ];   

	If[fe3rec == FORMEL`HollandBlundy && fe3flag == 0, 
	  sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-f-cl-h2o-s;
	  f1=16/sumcat; f2=8/si; f3=15/(sumcat-na-k+mn); f4=2/ca; f5=1;
	  f6=8/(si+al); f7=15/(sumcat-k); f8=12.9/(sumcat-na-k-ca); f9=36/(46-al-si-ti); f10=46/(fe2+fe3+46);
	  If[f1>1 || f2>1 || f3>1 || f4>1 || f5>1, fe3=0];
	  If[f6>1 || f7>1 || f8>1 || f9>1 || f10>1 || Max[{f6,f7,f8,f9,f10}]>Min[{f1,f2,f3,f4,f5}], 
	    warning = " (warning: unstoich. amph!)"];
	  fav = (Min[{f1,f2,f3,f4,f5}]+Max[{f6,f7,f8,f9,f10}])/2;
	  el = el fav; fe3 = 46(1-fav); If[fe3<0, fe3 = 0]; If[fe3 > 0, cil = ci fav];
	  el[[8]] = el[[8]] - fe3; el[[6]] = fe3;	
	  ];
	
	If[fe3flag==0, If[fe3 > cil[[fe2pos]], fe3=cil[[fe2pos]]; cil[[fe2pos]]=0, cil[[fe2pos]] = cil[[fe2pos]]-fe3]];

	(* calculate  amphibole site distribution according to Leake et al. (1997) and classify the amph on this basis *)
	{si,alt,tit,alc,tic,zr,cr,fe3,mgc,fe2c,mnc,znc,nic,coc,lic,mgb,fe2b,mnb,znb,nib,cob,
	lib,cab,caa,nab,naa,ka,tsum,csum,bsum,asum} = AmphSiteDistribution[el];
	{{si,al,ti,zr,cr,fe33,mg,fe2,mn,zn,ni,co,li,ca,na,k,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,cil,oxl];
	{group,name} = FindAmphName[si,al,ti,zr,cr,fe3,mg,fe2,mn,zn,ni,co,li,ca,na,k,lib,
				    cab,caa,nab,alc,cl,f,naa,ka];

	xmg = mg/(mg+fe2); xmn = mg/(mg+mn); xfe = fe2/(mg+fe2);
	
	(* site fraction calculation  *)
	(* site allocation: (Na,K)A(Mg,Fe2,Mn,Li,Ca,Na)2M4(Mg,Fe2,Mn,Li)3M13(Al,Cr,Fe3,Ti,Mg,Fe2,Mn,Li)2M2(Al,Si)4T1(Si)4T2 O22(OH)2  *)

	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}]+fe3-f-cl-h2o-s;	(* Sum cations *)

	If[h2o==0,xoh = 1 - ((f+cl)/2), xoh=h2o/(h2o+f+cl)];	(* XOH  *)   
    	If[si-4 < 4, xsit1 = (si-4)/4, xsit1 = 1];		(* XSi on T1 *)
   	xalt1 = alt/4;	If[xalt1 < 0, xalt1 = 0];		(* XAl on T1 *)
    	If[1-((alc+cr+fe3+tic)/2) > 0, 
	  xmgm2 = mg/(mg+fe2+mn+li)(10-cr-fe3-ti-al-si)/2;	(* XMg on M2 *)
      	  xfem2 = fe2/(mg+fe2+mn+li)(10-cr-fe3-ti-al-si)/2; 	(* XFe on M2 *)
   	  , xmgm2 = 0; xfem2 = 0];
  	xalm2 = (si+al-8)/2; If[xalm2 < 0, xalm2 = 0];		(* XAl on M2  *)
  	xfe3m2 = Chop[fe3/2,delta];				(* XFe(3+) on M2  *)
  	xtim2 = Chop[ti/2,delta];				(* XTi on M2  *)
    	xmgm13 = mg/(mg+fe2+mn+li);				(* XMg on M13  *)
   	xfem13 = fe2/(mg+fe2+mn+li);				(* XFe on M13  *)
   	xmnm13 = mn/(mg+fe2+mn+li);				(* XMn on M13  *)
	xka = Chop[k,delta];					(* XK on A   *)
	If[16-sumcat > 0, xva = 16 - sumcat, xva = 0];		(* XVac on A   *)
	If[sumcat - k - 15 > 0, xnaa = sumcat - k - 15, xnaa = 0]; (* XNa on A  *)
	If[ca/2 < 1, xcam4 = Chop[ca/2,delta], xcam4 = 1];	(* XCa on M4 *)
	If[(na - xnaa)/2 > 0, xnam4 = Chop[(na - xnaa)/2,delta], xnam4 = 0];		(* XNa on M4 *)
	If[1-xnam4-xcam4 > 0, xfem4 = (1-xnam4-xcam4)fe2/(mg+fe2+mn+li), xfem4 = 0];	(* XFe on M4 *)	
	If[1-xnam4-xcam4 > 0, xmgm4 = (1-xnam4-xcam4)mg/(mg+fe2+mn+li), xmgm4 = 0]; 	(* XMg on M4 *)	
	If[1-xnam4-xcam4 > 0, xmnm4 = (1-xnam4-xcam4)mn/(mg+fe2+mn+li), xmnm4 = 0]; 	(* XMn on M4 *)	

	(* calculate site fractions and proportions according to Holland & Blundy (1994) bzw. Dale et al. (2000)  *)
	If[fe3rec == FORMEL`HollandBlundy, 
	  sum = si+al+ti+fe3+mg+fe2+mn+ca+na+k;
	  cm = sum-ca-na-k-13;
	  xalt1 = (8-si)/4; If[xalt1 < 0, xalt1 = 0];
	  xalm2 = (al+si-8)/2; If[xalm2 < 0, xalm2 = 0]; 
	  xka = k;
	  xva = 16-sum; If[xva < 0, xva = 0]; If[xva > 1, xva = 1.];
	  xnaa = sum-k-15; If[xnaa < 0, xnaa = 0]; If[xnaa > 1, xnaa = 1.];
	  xnam4 = (na+k+15-sum)/2;
	  xcam4 = ca/2;
	  xfem2 = 0.5 xfe(10-fe3-al-si-ti);
	  xmgm2 = 0.5(1-xfe)(10-fe3-al-si-ti);
	  xfe3m2 = 0.5 fe3;
	  pgl = xnam4; pparg = xnaa; pkpa = xka; pfts = 0.5 fe3; pts = 0.5(si+al-k-na-8);
	  pcum = 0.5 cm; ptia = 0.5 ti; pmna = 0.5 mn; pfact = fe2/5; 
	  ptr = 1-(pgl+pparg+pkpa+pfts+pts+pcum+ptia+pmna+pfact);
	  ];

	If[fe3rec == FORMEL`LeakeFe3Min, fe3r = StringJoin["LeakeFe3Min",warning]]; 
	If[fe3rec == FORMEL`LeakeFe3Max, fe3r = StringJoin["LeakeFe3Max",warning]]; 
	If[fe3rec == FORMEL`LeakeFe3Mean, fe3r = StringJoin["LeakeFe3Mean",warning]]; 
	If[fe3rec == FORMEL`HollandBlundy, fe3r = StringJoin["HollandBlundy",warning]];

        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["amph"]];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32", 
	  ptr1 = 1-(pgl+pparg+pkpa+pfts+pts+pfact);
          ret = MinXHP["amph",0]; (* calcic amph *)
          If[xnam4 > 0.5, (* sodic amph *)
            prieb1 = xfe3m2; pgl1 = (xnam4-prieb1)xmg; pfgl1 = (xnam4-prieb1)xfe; sum = pgl1+pfgl1+prieb1;
            prieb1 = prieb1/sum; pgl1 = pgl1/sum; pfgl1 = pfgl1/sum;
            ret = MinXHP["amph",1]]; 
          If[xcam4 < 0.3 && xnam4 < 0.3, (* Fe-Mg amph *)
            pcum1 = xmg; pgrun1 = xfe; ret = MinXHP["amph",2]]; 
          ];
	If[mode == FORMEL`Gtb,
	  Return[{cil,{{{xs1,{alt,alc,Chop[fe3,delta],sumcat,Chop[cab+nab],
		 Chop[nab,delta],Chop[naa+ka,delta],xmg,xfe,xmn,group,name,fe3r}}, ret, GtbX["amph"]}}}];
	  ];
	Return[{cil,{{{xs1,{alt,alc,Chop[fe3,delta],sumcat,Chop[cab+nab],
		Chop[nab,delta],Chop[naa+ka,delta],xmg,xfe,xmn,group,name,fe3r}}, ret}}}];
]

Px[ci_,ox_,fe3rec_,mode_] := Block[{o=6,t=4,cil=ci,sumcat,oxl,oxx=ox,xs,xsexp,xs1,si=0,al=0,fe2pos,fe2=0,fe3=0,mg=0,mn=0,ca=0,na=0,
	ti=0,cr=0,v=0,zr=0,sc=0,zn=0,li=0,aidstr,aid,sumticrvzrsczn,tsum=0,m1sum=0,m2sum=0,q,j,name="noname",d=10^-7,
	group="nogroup",alt=0,alm1=0,fe3t=0,fem1=0,mgm1=0,mgm2=0,fe2m1=0,fe2m2=0,mnm1=0,mnm2=0,fe3flag=0,
	molwo=0,molen=0,molfs=0,molq,mol2na,moljd=0,molae=0,fe3r="NoCalculation",ret,
	xcam2,xmgm2,xfe2m2,xnam2,xmgm1,xalm1,xfe2m1,xfe3m1,xalt,xsit,xmg,xfe,xdi=0,xhed=0,xcats=0,xjd=0,xen=0,xfs=0,xmgts=0,xae=0,
	xalm1gt7,xmgm1gt7,xfem1gt7,xmgm2gt7,xfem2gt7,sumgt710,xfegt710,xmggt710,xcagt710,xalgt710,xfegt9,xmggt9,xalgt9,
	xmgm1gt10,xmgm2gt10,xfem1gt13,xalm1gb14,jadgb14,xalm1tsgb14,xmfm1gb14,xmfm2gb14,xmgm1gb14,xfem1gb14},
	oxl = {"SiO2","Al2O3","FeO","Fe2O3","MgO","MnO","CaO","Na2O","TiO2","Cr2O3","V2O3","ZrO2","Sc2O3","ZnO","Li2O"};
	xs1 = {"Al(IV)","Al(VI)","Fe3","SumCat","SumM1","SumM2","Q","J","Q+J","J/(J+Q)"};
	xs = {"group", "name", "Fe3CalcMode"};
	xsexp = {group,name,fe3r}; 

	{{si,al,fe2,fe3,mg,mn,ca,na,ti,cr,v,zr,sc,zn,li},fe2pos} = FindElementOrder[ox,ci,oxl];
	If[fe3 > 0, fe3flag = 1];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* Sum cations *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, (* do Fe3+ recalculation according to Droop (1987) *)
	  If[sumcat > t, fe3 = 2o(1-t/sumcat); 		
	   cil = cil t/sumcat; 
	   If[fe3 > cil[[fe2pos]], fe3=cil[[fe2pos]]; cil[[fe2pos]]=0, cil[[fe2pos]] = cil[[fe2pos]]-fe3]]; 
	   cil = Append[cil,fe3]; oxx = Append[ox,"Fe2O3"]];
	{{si,al,fe2,fe3,mg,mn,ca,na,ti,cr,v,zr,sc,zn,li},fe2pos} = FindElementOrder[oxx,cil,oxl];
	sumcat = Sum[cil[[i]],{i,1,Dimensions[cil][[1]]}];	(* new sum of cations *)
	If[fe3rec == FORMEL`Droop && fe3flag == 0, fe3r = "Droop"];

	(* site filling and nomenclature according to Morimoto et al. (1988)   *)
	If[si < 2, tsum=si+al; (* T-site filling: order: Si, Al, Fe(3+)  *)
	  If[tsum < 2, tsum=tsum+fe3;
	    If[tsum < 2, alt=al; fe3t=fe3;
	      , alt=al; fe3t=2-(tsum-fe3); fe3m1=fe3-fe3t];
	    , alt=2-(tsum-al); alm1=al-alt; fe3m1=fe3];
	  , alm1=al; fe3m1=fe3];
	m1sum=alm1+fe3m1+ti+cr+v+zr+sc+zn+mg;
	If[m1sum < 1, m1sum=m1sum+fe2; (* M1-site filling: order: rest of Al,Fe3, then Ti,Cr,V,Zr,Sc,Zn, Mg, Fe2, Mn *)
	  If[m1sum < 1, m1sum=m1sum+mn;
	    If[m1sum < 1, mgm1=mg; fe2m1=fe2; mnm1=mn;
	      , mgm1=mg; fe2m1=fe2; mnm1=1-(m1sum-mn); mnm2=mn-mnm1];
	    , mgm1=mg; fe2m1=1-(m1sum-fe2); fe2m2=fe2-fe2m1; mnm2=mn];
	  , mgm1=1-(m1sum-mg); mgm2=mg-mgm1; fe2m2=fe2; mnm2=mn];
	m1sum = alm1+fe3m1+ti+cr+v+zr+sc+zn+mgm1+fe2m1+mnm1;
	m2sum = mgm2+fe2m2+mnm2+li+ca+na;

	q = ca+mgm1+mgm2+fe2m1+fe2m2;		(* classification parameter  *)
	j = 2 na;				(* classification parameter  *)
	If[q+j <= 2.2 && q+j >= 1.5 && j/(j+q) <= 0.2, group="quad-Px"; 	(* Quad pyroxenes *)
	  molwo = 100 ca/(q+fe3m1+mnm1+mnm2);					(* Mol% Wo component  *)
	  molen = 100 (mgm1+mgm2)/(q+fe3m1+mnm1+mnm2);				(* Mol% En component  *)
	  molfs = 100 (fe2m1+fe2m2+fe3m1+mnm1+mnm2)/(q+fe3m1+mnm1+mnm2); 	(* Mol% Fs component  *)
	  If[molwo <= 5,
	    If[molfs/(molfs+molen) >= 0.5, name = "(Clino)ferrosilite"];
	    If[molfs/(molfs+molen) < 0.5,  name = "(Clino)enstatite"]];
	  If[molwo > 5 && molwo <= 20, name = "pigeonite"];
	  If[molwo > 20 && molwo <= 45, name = "augite"];
	  If[molwo > 45 && molwo <= 50,
	    If[molfs/(molfs+molen) >= 0.5, name = "hedenbergite"];
	    If[molfs/(molfs+molen) < 0.5,  name = "diopside"]];
	  If[molwo > 50, name = "unusual-Px"];
	  xs = {"MolWo", "MolEn", "MolFs", "group", "name","Fe3CalcMode"};
	  xsexp = {molwo,molen,molfs,group,name,fe3r}; 
	  ];
	If[q+j <= 2.2 && q+j >= 1.5 && j/(j+q) > 0.2 && j/(j+q) < 0.8, group="Ca-Na-Px";(* Ca-Na pyroxenes *)];
	If[q+j <= 2.2 && q+j >= 1.5 && j/(j+q) >= 0.8, group="Na-Px";(* Na pyroxenes *)];
	If[group == "Ca-Na-Px" || group == "Na-Px",
	  molq = 100q/(q+2na); mol2na = (100 2na)/(q+2na);
	  molae = mol2na (fe3t+fe3m1)/(fe3t+fe3m1+alt+alm1);
	  moljd = mol2na (alt+alm1)/(fe3t+fe3m1+alt+alm1);
	  If[molq <= 20,
		If[molae/(moljd+molae) >= 0.5, name = "aegirine"];
		If[molae/(moljd+molae) < 0.5, name = "jadeite"]];
	  If[molq > 20 && molq <= 80,
		If[molae/(moljd+molae) >= 0.5, name = "aegirine-augite"];
		If[molae/(moljd+molae) < 0.5, name = "omphacite"]];
	  xs = {"MolQ", "MolJd", "MolAe", "group", "name","Fe3CalcMode"};
	  xsexp = {molq,moljd,molae,group,name,fe3r}; 	  
	  ];
	If[q+j < 1.5, group="other-Px";(* other pyroxenes *); xs={"group","name","Fe3CalcMode"}; xsexp = {group, name, fe3r}];

	(* site filling according to TWEEQ documentation  *)
	(* Cpx: (Ca,Na,Mn,rest-Fe2)M2(Mg,Al,Ti,Fe3,Fe2)M1(Al,Si)2TO6  *)
	xmg = mg/(mg+fe2);			(* XMg		 *)
	xfe = fe2/(mg+fe2);			(* XFe		 *)
	If[si <= 2, xsit = si/2, xsit = 1];	(* XSi     on T  *)
	xalt = alt/2;				(* XAl     on T  *)
	xfe3m1 = fe3m1;				(* X(Fe3+) on M1 *)
	xalm1 = alm1;				(* XAl     on M1 *)
	xcam2 = ca;				(* XCa on M2  *)
	xnam2 = na;				(* XNa on M2 *)

	If[mg + fe2 > 1.5, (* Opx  *)
	  xmgm1 = xmg(1-alm1-fe3m1-ti-cr-v-zr-sc-zn);		(* XMg     on M1 *)
	  xfe2m1 = (1-xmg)(1-alm1-fe3m1-ti-cr-v-zr-sc-zn);	(* XFe(2+) on M1 *)
	  xmgm2 = xmg(1-ca-na-mn);				(* XMg     on M2 *)
	  xfe2m2 = (1-xmg)(1-ca-na-mn);			(* XFe(2+) on M2 *)
	  ];
	If[mg + fe2 <= 1.5, (* Cpx  *)
	  xmgm1 = mg;					(* XMg     on M1 *)
	  xfe2m1 = (1-mg-alm1-fe3m1-ti);		(* XFe(2+) on M1 *)
	  If[xfe2m1 < 0, xfe2m1 = 0];
	  xmgm2 = 0;					(* XMg     on M2 *)
	  xfe2m2 = fe2 - xfe2m1;	  		(* XFe(2+) on M2 *)
	  If[xfe2m2 < 0, xfe2m2 = 0];			
	  ];

	If[fe3rec == FORMEL`Droop && fe3flag == 0, cil = Delete[cil,Dimensions[cil][[1]]]];
	If[mode == FORMEL`Gtb, (* thermobarometric-specific parameters  *)
	  xalm1gt7 = na + (al-na)/2;		(* gt-7: XAl on M1 according to Berman et al. (1995), p.32 *)		
	  xmgm1gt7 = (1-xalm1-cr-ti-fe3)xmg;	(* gt-7: XMg on M1 *)
	  xfem1gt7 = (1-xalm1-cr-ti-fe3)xfe;	(* gt-7: XFe on M1 *)
	  xmgm2gt7 = (1-na-ca)xmg;		(* gt-7: XMg on M2 *)
	  If[xmgm2gt7 < 0, xmgm2gt7 = 0];
	  xfem2gt7 = (1-na-ca)xfe;		(* gt-7: XFe on M2 *)
	  If[xfem2gt7 < 0, xfem2gt7 = 0];	  
	  sumgt710 = mg + fe2 + fe3 + ca + al + cr - na; (* gt-7/10: parameters for the grt-cpx thermometer of Saxena (1979)  *)
	  xfegt710 = (fe2+fe3)/sumgt710;		 (* gt-7/10: XFe *)
	  xmggt710 = mg/sumgt710; xcagt710 = ca/sumgt710; xalgt710 = al/sumgt710;
	  
	  xfegt9 = fe2/(fe2+mg+al/2);		(* gt-9: XFe  *)
	  xmggt9 = mg/(fe2+mg+al/2);		(* gt-9: XMg  *)
	  xalgt9 = (al/2)/(fe2+mg+al/2);	(* gt-9: XAl  *)	  
	  
	  xmgm1gt10 = (1-al-cr-ti-fe3)xmg;	(* gt-10: XMg on M1: Wood & Banno (1973), p.118 *)
	  If[xmgm1gt10 < 0, xmgm1gt10 = 0];
	  xmgm2gt10 = (1-ca-na-mn)xmg;		(* gt-10: XMg on M2: Wood & Banno (1973), p.118 *)
	  If[xmgm2gt10 < 0, xmgm2gt10 = 0];
	  xfem1gt13 = (1-al-cr-ti-fe3)xfe;	(* gt-13: XFe on M1: Wood & Banno (1973), p.118 *)
	  
	  xalm1gb14 = (al+na-cr-fe3-2ti)/2;			(* gb-14: XAl on M1 *)
	  jadgb14 = na-cr-fe3-2ti;				(* gb-14: jadeite *)
	  If[jadgb14 <= 0, xalm1tsgb14 = (al+jadgb14)/2];	(* gb-14: XAl on M1 due to ts *)
	  If[jadgb14 > 0, xalm1tsgb14 = (al-jadgb14)/2];	(* gb-14: XAl on M1 due to ts *)
	  xmfm1gb14 = (1-xalm1gb14-cr-fe3-ti);			(* gb-14: XMF on M1 *)
	  If[xmfm1gb14 < 0, xmfm1gb14 = 0];
	  xmfm2gb14 = (1-ca-na-mn);				(* gb-14: XMF on M2 *)
	  If[xmfm2gb14 < 0, xmfm2gb14 = 0];
	  xmgm1gb14 = xmfm1gb14*xmg;				(* gb-14: XMg on M1 *)	  
	  xfem1gb14 = xmfm1gb14*(1-xmg);			(* gb-14: XFe on M1 *)	  
	  ];
	  			
        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = MinXB["px"]];
	If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32", 
          If[mg + fe2 <= 1.5, (* assume Cpx  *)
	    If[na <= 0.3,
	      xen = xmgm2; xjd = xnam2-xfe3m1; xcats = xalm1-xjd; xhed = xfe2m1;
	      If[xen < 0, xen = 0]; If[xjd < 0, xjd = 0];
	      xdi = 1-(xen+xjd+xcats+xhed);
              ret = MinXHP["px",0];
	      ];
	    If[na >= 0.3,
	      xjd = xalm1; xae = xfe3m1; If[xjd > 1, xjd = 1];
	      xdi = (1-xjd-xae)xmg; xhed = (1-xjd-xae)(1-xmg);
	      If[xdi < 0, xdi = 0]; If[xhed < 0, xhed = 0];	      
              ret = MinXHP["px",1];
	      ];
            ];
          If[mg + fe2 > 1.5, (* assume Opx  *)
            xdi = xcam2; xmgts = xalm1; 
            xen = (1-xdi-xmgts)xmg; xfs = (1-xdi-xmgts)(1-xmg);
            ret = MinXHP["px",2];
            ];            
          ];
	If[mode == FORMEL`Gtb, (* thermobarometric-specific parameters  *)
	  Return[{cil,{{{Flatten[Join[xs1,xs]],Flatten[Join[{alt,alm1,fe3,sumcat,m1sum,m2sum,q,j,q+j,j/(j+q)},xsexp]]},ret,GtbX["px"]}}}]];
	  Return[{cil,{{{Flatten[Join[xs1,xs]],Flatten[Join[{alt,alm1,fe3,sumcat,m1sum,m2sum,q,j,q+j,j/(j+q)},xsexp]]},ret}}}];		   
]

Stilp[ci_,ox_,mode_] := Block[{sumcat,oxl,xs1,xsgtb,i,fe=0,mg=0,ti=0,al=0,alvi=0,aliv=0,si=0,k=0,na=0,ca=0,mn=0,ba=0,fe3=0,
	cr=0,fe2pos,f=0,cl=0,h2o=0,s=0,xsi,xal,xfe},
	oxl = {"FeO","MgO","TiO2","Al2O3","SiO2","K2O","Na2O","CaO","MnO","BaO","Fe2O3","Cr2O3","F","Cl","H2O","S"};
	xs1 = {"SumCat","SumOk","SumA"};
	{{fe,mg,ti,al,si,k,na,ca,mn,ba,fe3,cr,f,cl,h2o,s},fe2pos} = FindElementOrder[ox,ci,oxl];
	(* (K,Na,Ba,Ca)0-1.4A,(Fe2,Mg,Mn,Ti,Al,Cr,Fe3)5.9-8.2M,(Si,Al)8T,O20(OH)4(O,OH,H2O)3.6-8.5; DHZ *)
	sumcat = Sum[ci[[i]],{i,1,Dimensions[ci][[1]]}]-f-cl-h2o-s;	(* sum cations *)
	xsi = si/8; If[si >= 8, xsi = 1];			(* XSi  on T   *)
	xfe = fe/(fe+mg+mn+al+ti+fe3+cr);			(* XFe	on M  *)
	xal = al/(fe+mg+mn+al+ti+fe3+cr);			(* XAl  on M  *)
	If[h2o==0, xoh = 1 - ((f+cl)/2), xoh = h2o/(h2o+f+cl)];	(* XOH	      *)

        If[ToString[Options[Dataset][[1, 2]]] == "B88" || ToString[Options[Dataset][[1, 2]]] == "G97", ret = {{},{}}];
        If[ToString[Options[Dataset][[1, 2]]] == "HP31" || ToString[Options[Dataset][[1, 2]]] == "HP32",ret = {{},{}}];
	If[mode == FORMEL`Gtb,
	  Return[{{{xs1,{sumcat,fe+mg+mn+alvi+ti+fe3+cr,k+na+ba+ca}}, ret, GtbX["stilp"]}}]];
	Return[{{{xs1,{sumcat,fe+mg+mn+alvi+ti+fe3+cr,k+na+ba+ca}}, ret}}];	
]

CCalcFormula[fname_,FORMEL`Fe3Grt_,FORMEL`Fe3Amph_,FORMEL`Fe3Px_,FORMEL`Fe3Spin_,
            FORMEL`Fe3Ctd_,FORMEL`Fe3Saph_,FORMEL`Fe3Fetiox_,FORMEL`Oxygens_,
            FORMEL`NumberFormatFu_,FORMEL`NumberFormatX_,FORMEL`CalcFormulaMode_,FORMEL`CalcFormulaBasis_] := 
	Block[{file,ftest,w,wt,n,nz,nsp,min,obasis=0,mininstalled,ox,o,mg,oiox,ciox,mgused,oioxused,cioused,count=0,i,j,p,bo,bc,kic,pos,ii,iii,nn,
	kio,no,so,sc,f=0,cl=0,of=ocl=os=0,s=0,h2o=0,co2=0,cio,x,c,return,fnamel,iiii,r,mintwq,mintc,oxtc,flag,wpet,
	optamph={FORMEL`LeakeFe3Min,FORMEL`LeakeFe3Max,FORMEL`LeakeFe3Mean,FORMEL`HollandBlundy,FORMEL`NoCalculation},
	opt={FORMEL`Droop,FORMEL`NoCalculation},oxcat=FORMEL`Oxygens,oxcatt,str,dpos,oup,
	opt1={{},FORMEL`PetToTweeq,FORMEL`TweeqToPet,FORMEL`PetToAx,FORMEL`AxToPet,FORMEL`Gtb},form1=FORMEL`NumberFormatFu,form2=FORMEL`NumberFormatX,
	opt2={FORMEL`OxygenBasis,FORMEL`CationBasis}
	},

	(* List of installed minerals *)
	mininstalled = {"grt","bt","wm","plag","kf","chl","stau","ctd","alsi","crd","ol","zoep","cal","dol","spin","saph",
		       "fetiox","sphen","ta","amph","cpx","opx","stilp"};
	If[ToString[Head[fname]] != "String", Print["Error-message from -CalcFormula-: File-name is not a string."]; Return[]];
	If[Intersection[{FORMEL`Fe3Grt},opt] == {} || Intersection[{FORMEL`Fe3Px},opt] == {} || Intersection[{FORMEL`Fe3Spin},opt] == {}
	  || Intersection[{FORMEL`Fe3Ctd},opt] == {} || Intersection[{FORMEL`Fe3Saph},opt] == {} || Intersection[{FORMEL`Fe3Fetiox},opt] == {},
	  Print["wrong value for option. Allowed values are: ",opt]; Return[]];
	If[Intersection[{FORMEL`Fe3Amph},optamph] == {}, Print["wrong value \"",FORMEL`Fe3Amph,"\" for option \"Fe3Amph\""];
	   Print["Allowed values are: ",optamph];Return[]];
	If[Intersection[{FORMEL`CalcFormulaMode},opt1] == {}, Print["wrong value \"",FORMEL`CalcFormulaMode,"\" for option \"CalcFormulaMode\""];
	   Print["Allowed values are: ",opt1];Return[]];
	If[Intersection[{FORMEL`CalcFormulaBasis},opt2] == {}, Print["wrong value \"",FORMEL`CalcFormulaBasis,"\" for option \"CalcFormulaBasis\""];
	   Print["Allowed values are: ",opt2];Return[]];

	(* o: list of available oxides  *)
	o = {"SiO2","Al2O3","FeO","MgO","CaO","MnO","TiO2","Na2O","K2O","BaO","Cr2O3","Fe2O3","ZnO","F","Cl",
	     "SrO","B2O3","BeO","Ce2O3","CoO","Eu2O3","HfO2","La2O3","Li2O","Lu2O3","Nd2O3","NiO","PbO","Y2O3","ZrO2",
	     "V2O3","Er2O3","Dy2O3","Pr2O3","Gd2O3","Sm2O3","ThO2","UO2","Sc2O3","P2O5","CO2","CeO2","CuO","H2O","MnO2","Mn3O4",
	     "Nb2O5","Rb2O","S","SO3","SnO","Ta2O5","Cs2O"};
	(* mg: Molar weights of oxides  *)
	mg = {60.085,101.962,71.846,40.304,56.079,70.937,79.899,61.979,94.195,153.339,151.99,159.692,81.379,37.997/2,70.906/2,
	103.619,69.618,25.012,328.238,74.933,351.918,210.489,325.809,29.879,397.938,336.478,74.699,223.199,225.81,123.219,149.881,
	382.518,372.998,329.814,362.498,348.798,264.037,270.028,137.91,141.945,44.01,172.119,79.545,18.015,86.937,228.812,265.81,186.94,32.06,80.058,134.69,441.893,281.81};
	(* oiox: number of oxygens in the oxides; ciox: number of cations in the oxides  *)
	oiox = {2.,3.,1.,1.,1.,1.,2.,1.,1.,1.,3.,3.,1.,0.,0.,1.,3.,1.,3.,1.,3.,2.,3.,1.,3.,3.,1.,1.,3.,2.,3.,3.,3.,3.,3.,3.,2.,2.,3.,5.,
		2,2,1,1,2,4,5,1,0,3,1,5,1};	
	ciox = {1.,2.,1.,1.,1.,1.,1.,2.,2.,1.,2.,2.,1.,1.,1.,1.,2.,1.,2.,1.,2.,1.,2.,2.,2.,2.,1.,1.,2.,1.,2.,2.,2.,2.,2.,2.,1.,1.,2.,2.,
		1,1,1,2,1,3,2,2,1,1,1,2,2};

	(* THERMOCALC -> PET interface: use a *.dat from Ax.exe and convert it to a PET-readable format *)
	If[FORMEL`CalcFormulaMode == FORMEL`AxToPet,
	  file = StringJoin[fname,".dat"];
	  ftest = OpenRead[file]; Close[ftest];
	  If[ftest == $Failed, 
	    Print["Error-message from -CalcFormula-: File \"", file,"\" does not exist."];	
	    Return[]];	
	  Print["Message from -CalcFormula- (THERMOCALC -> PET interface):"];
	  Print["Converting file \"",file,"\" to PET-readable format, stored without extension."];
	  w = ReadList[file, Word, RecordLists -> True, WordSeparators -> {" ", "\t", ","}, RecordSeparators -> {"\n", "\r"}];
	  ox = Prepend[Prepend[w[[1]], "Mineral"], "Label"];
	  mintc = {"mu", "bi", "amph", "fsp", "ep", "g", "cpx", "opx", "chl", "ta", "ol", "ctd", "cd", "st", "sp", "carb", "ilhem", "spr"};
	  mininstalled = {"wm", "bt", "amph", "plag", "zoep", "grt", "cpx", "opx", "chl", "ta", "ol", "ctd", "crd", "stau", "spin", "cal", "fetiox", "saph"};
	  wpet = Table[0, {i, 1, (Dimensions[w][[1]] - 2)/2}];
	  For[i = 1, i <= (Dimensions[w][[1]] - 2)/2, i++,  
  	     pos = Position[mintc, w[[2i, 1]]];
  	     If[pos != {}, pos = pos[[1, 1]]];
  	     wpet[[i]] = Prepend[Prepend[w[[2i + 1]], mininstalled[[pos]]], w[[2i, 2]]];
  	     ];
	  file = OpenWrite[fname];
	  For[i = 1, i <= Dimensions[ox][[1]], i++, 
    	     If[i == 1, WriteString[file, ox[[i]]]];
    	     If[i > 1, WriteString[file, "\t", ox[[i]]]];];
	     WriteString[file, "\n"];
	  For[i = 1, i <= Dimensions[wpet][[1]], i++,
    	     For[j = 1, j <= Dimensions[ox][[1]], j++,
      		If[j == 1, WriteString[file, wpet[[i, j]] ]];
      		If[j > 1, WriteString[file, "\t", wpet[[i, j]]]];];
    	  WriteString[file, "\n"];];
	  Close[file];
	  Return[];
	  ];

	(* TWEEQ -> PET interface: use a *.oxi from Cmp.exe and convert it to a PET-readable format *)
	If[FORMEL`CalcFormulaMode == FORMEL`TweeqToPet,
	  file = StringJoin[fname, ".oxi"];
	  ftest = OpenRead[file]; Close[ftest];
	  If[ftest == $Failed, 
	    Print["Error-message from -CalcFormula-: File \"", file,"\" does not exist."];	
	    Return[]];	
	  Print["Message from -CalcFormula- (TWEEQ -> PET interface):"];
	  Print["Converting file \"",file,"\" to PET-readable format, stored without extension."];
	  oup = {"SIO2", "AL2O3", "FEO", "MGO", "CAO", "MNO", "TIO2", "NA2O", "K2O", "BAO", "CR2O3", "FE2O3", "ZNO", "F", "CL", "SRO", "B2O3", "BEO", 
      		 "CE2O3", "COO", "EU2O3", "HFO2", "LA2O3", "LI2O", "LU2O3", "ND2O3", "NIO", "PBO", "Y2O3", "ZRO2", "V2O3", "ER2O3", "DY2O3", "PR2O3", 
      		 "GD2O3", "SM2O3", "THO2", "UO2", "SC2O3", "P2O5", "CO2", "CEO2", "CUO", "H2O", "MNO2", "MN3O4", "NB2O5", "RB2O", "S", "SO3", "SNO", "TA2O5", "CS2O"};
	  w = ReadList[file, Word, RecordLists -> True, WordSeparators -> {" ", "\t", ","}, RecordSeparators -> {"\n", "\r"}];
	  ox = Prepend[Prepend[w[[2]], "Mineral"], "Label"];
	  ox = Delete[ox, 3];
	  For[i = 3, i <= Dimensions[ox][[1]], i++, ox[[i]] = ToUpperCase[ox[[i]]]];
	  For[i = 3, i <= Dimensions[ox][[1]], i++,pos = Position[oup, ox[[i]]][[1, 1]];
    	     ox[[i]] = o[[pos]];
    	     ];
	  mintwq = {"GARN", "BIOT", "MICA", "PLAG", "AMPH", "CPX ", "OPX ", "CORD", "CUM "};
	  mininstalled = {"grt", "bt", "wm", "plag", "amph", "cpx", "opx", "crd", "cum"};
	  wpet = Take[w, {3, Dimensions[w][[1]]}];
	  For[i = 1, i <= Dimensions[wpet][[1]], i++, wpet[[i]] = Prepend[wpet[[i]], i];
    	     pos = Position[mintwq, wpet[[i, 2]]][[1, 1]];
    	     wpet[[i, 2]] = mininstalled[[pos]];
    	     If[wpet[[i, 2]] == "cum", wpet[[i, 2]] = "amph"];
    	     ];
	  file = OpenWrite[fname];
	  For[i = 1, i <= Dimensions[ox][[1]], i++, 
    	     If[i == 1, WriteString[file, ox[[i]]]];
    	     If[i > 1, WriteString[file, "\t", ox[[i]]]];];
	  WriteString[file, "\n"];
	  For[i = 1, i <= Dimensions[wpet][[1]], i++, 
    	     For[j = 1, j <= Dimensions[ox][[1]], j++, 
      		If[j == 1, WriteString[file, wpet[[i, j]]]];
      		If[j > 1, WriteString[file, "\t", wpet[[i, j]]]];];
    	  WriteString[file, "\n"];];
	  Close[file];      
      	  Return[];
	  ];

	file = fname;
	ftest = OpenRead[file]; Close[ftest];
	If[ftest == $Failed, 
	  Print["Error-message from -CalcFormula-: File \"", file,"\" does not exist."];	
	  Return[]];	
	w = ReadList[file,Word,RecordLists->True,
                 WordSeparators->{" ","\t",","},RecordSeparators->{"\n","\r"}];
	wt = Transpose[w];
	no = Delete[wt[[1]],1];	(* list of labels and minerals in the data file  *)
	w = ToExpression[w];
	wt = Transpose[w];
	min = wt[[2]]; 		(* list of minerals in the data file  *)
	min = Delete[min,1];
	For[i=1,i<=Dimensions[min][[1]],i++, (* check if minerals are found in the available list <mininstalled> *)
	   If[p = Position[mininstalled,ToString[min[[i]]]] == {} && StringPosition[ToString[min[[i]]],"min"] == {}, 
	      Print["Error-message from -CalcFormula-: wrong mineral code \"",ToString[min[[i]]],"\" in data-file !"]; Return[]]];
	w = Transpose[Delete[Delete[wt,1],1]];
	ox = w[[1]];			(* List of Oxides in the data file *)
	w = Delete[w,1];		(* Field of weight percentages	*)
	{nz, nsp} = Dimensions[w];  	(* nz: number of analyses, nsp: number of oxides *)


	(* PET -> TWEEQ interface: create *.oxi file for Cmp.exe  *)
	If[FORMEL`CalcFormulaMode == FORMEL`PetToTweeq && ToString[Options[Dataset][[1, 2]]] == "B88",
	  If[StringPosition[fname, "."] != {}, Print["Error-message from -CalcFormula-: use file-names without extension,"];
	     Print["(*.oxi will be added for use with Cmp.exe)."]; Return[]];
	  mininstalled = {"grt","bt","wm","plag","amph","cpx","opx"};
	  mintwq = {"GARN","BIOT","MICA","PLAG","AMPH","CPX ","OPX "};
	  If[Intersection[mininstalled,Table[ToString[min[[i]]],{i,1,Dimensions[min][[1]]} ]] != {}, 
	     Print["Message from -CalcFormula- (PET -> TWEEQ interface): creating file \"",StringJoin[fname,".oxi\"."]];
	     Print["Use Cmp.exe to create a *.cmp file for further calculations with PET or TWEEQ."];
	     file = OpenWrite[StringJoin[fname,".oxi"]];
	     WriteString[file,"Data converted from PET-file: ",fname,", date: ",ToString[Take[Date[], {1, 3}]]"\n"];
	     WriteString[file,"SAMPLE"];
	     For[i=1,i<=Dimensions[ox][[1]],i++,
	        WriteString[file,",",ToUpperCase[ToString[ox[[i]]]]];
	        ];
	     WriteString[file,"\n"];
	     For[i=1,i<=Dimensions[min][[1]],i++,
	        pos = Position[mininstalled,ToString[min[[i]]]];
	        If[pos != {},
		  pos = pos[[1,1]];
	   	  WriteString[file,mintwq[[pos]]];
		  For[j=1,j<=Dimensions[ox][[1]],j++,
	      	     WriteString[file,",", ToString[w[[i,j]]]];		
		     ];	      
	   	  WriteString[file,"\n"];
	          ];	      
	        ];
	     Close[file]; 		   
	    ];
	  ];

	(* PET -> THERMOCALC interface: create *.dat file for Ax.exe  *)
	If[FORMEL`CalcFormulaMode == FORMEL`PetToAx,
	  If[StringPosition[fname, "."] != {}, Print["Error-message from -CalcFormula-: use file-names without extension,"];
	     Print["(*.dat will be added for use with Ax.exe)."]; Return[]];
	  mintc = {"mu","bi","amph","fsp","ep","g","cpx","opx","chl","ta","ol","ctd","cd","st","sp","carb","ilhem","spr"};
	  mininstalled = {"wm","bt","amph","plag","zoep","grt","cpx","opx","chl","ta","ol","ctd","crd","stau","spin","cal","fetiox","saph"};
	  oxtc = {"SiO2","TiO2","Al2O3","Cr2O3","Fe2O3","FeO","MnO","MgO","CaO","Na2O","K2O"};
	  For[i=1,i<=Dimensions[ox][[1]],i++, (* check oxides  *)
	     pos = Position[oxtc,ToString[ox[[i]]]];
	     If[pos == {}, Print["Error-message from -CalcFormula- (PET -> THERMOCALC interface): Oxide ",ox[[i]]," is not accepted by Ax.exe."]; Return[]];
	     ];
	  Print["Message from -CalcFormula- (PET-THERMOCALC interface): creating file \"",StringJoin[fname,".dat\"."]];
	  Print["Use Ax.exe for further calculations with THERMOCALC."];
	  file = OpenWrite[StringJoin[fname,".dat"]];
	  For[i=1,i<=Dimensions[ox][[1]],i++,
	     If[i==1, WriteString[file,ToString[ox[[i]]]]];
	     If[i>1, WriteString[file,",",ToString[ox[[i]]]]];
	     ];
	  WriteString[file,"\n"];
	  For[i=1,i<=Dimensions[min][[1]],i++,
	     pos = Position[mininstalled,ToString[min[[i]]]];
	     If[pos != {},
		pos = pos[[1,1]];
	   	WriteString[file,mintc[[pos]]," ",no[[i]]];
	   	If[i==1, WriteString[file," Data converted from PET-file: ",fname,", date: ",ToString[Take[Date[], {1, 3}]]];];
	   	WriteString[file,"\n"];
		For[j=1,j<=Dimensions[ox][[1]],j++,
	      	   If[j==1, WriteString[file,ToString[w[[i,j]]]]];		
	      	   If[j>1, WriteString[file,",", ToString[w[[i,j]]]]];		
		   ];	      
	   	WriteString[file,"\n"];
	        ];	      
	     ];
	  WriteString[file,"*"];   
	  Close[file]; 		   
	  ];

	If[oxcat != {},
	  If[Dimensions[oxcat][[2]] != 2, Print["Error-message from -CalcFormula-: Format Error for option \"Oxygens\""];
	     Print["Format must e.g. be: {{Na2O, 0},{K2O, 0}, etc.}"]; Return[]];
	  oxcatt = Transpose[oxcat];
	  For[i=1,i<=Dimensions[oxcat][[1]],i++,
	     pos=Position[o,ToString[oxcatt[[1]][[i]]]];
	     If[pos == {}, Print["Error-message from -CalcFormula-: Oxide \"",ToString[oxcatt[[1]][[i]]],"\" not known."]; Return[]];
	     oiox[[pos[[1,1]]]]	= oxcatt[[2]][[i]];
	     ];
	  ];
	mgused = oioxused = cioxused = Table[0,{i,1,nsp}]; 
	(* find list of actually used oxides *)
	For[i=1,i<=nsp,i++, ox[[i]] = ToString[ox[[i]]];
	   If[ox[[i]]== "F", f=1]; If[ox[[i]]== "Cl", cl=1]; If[ox[[i]]== "S", s=1];
	   If[ox[[i]]== "H2O", h2o=1]; If[ox[[i]]== "CO2", co2=1]];
	If[h2o==1 && f == 1, oiox[[Position[o,"F"][[1,1]]]] = 0.5];
	If[h2o==1 && cl == 1, oiox[[Position[o,"Cl"][[1,1]]]] = 0.5];
	If[h2o==1 && s == 1, oiox[[Position[o,"S"][[1,1]]]] = 1];
	For[i=1,i<=nsp,i++, ox[[i]] = ToString[ox[[i]]];
	   For[j=1,j<=Dimensions[o][[1]],j++, 
	      If[ox[[i]] == o[[j]], mgused[[++count]] = mg[[j]];
       		 oioxused[[count]] = oiox[[j]];
       		 cioxused[[count]] = ciox[[j]]]]];
	If[p = Position[mgused,0] != {}, Return["Error-message from -CalcFormula-: wrong oxide declaration in data-file."]];
	(* Find normalisation basis: bo: number of oxygens, bc: number of cations in the mineral *)
	bo = bc = Table[0,{i,1,nz}];	
	For[i=1,i<=nz,i++,
	   str = ToString[min[[i]]];
	   If[StringPosition[str,"min"] != {}, bc[[i]] = 0;
	     If[StringPosition[str,"."] != {},Print["Error-message from -CalcFormula-: Decimal point in combination with \"min\" is forbidden, replace by \"d\"."];
	     Return[]];
	     dpos = StringPosition[str,"d"];
	     If[dpos == {},
	       If[FORMEL`CalcFormulaBasis == FORMEL`OxygenBasis,bo[[i]] = ToExpression[StringTake[str,{4,StringLength[str]}]]];
	       If[FORMEL`CalcFormulaBasis == FORMEL`CationBasis,bc[[i]] = ToExpression[StringTake[str,{4,StringLength[str]}]]];	     
	       ];
	     If[dpos != {},
	       dpos = Flatten[dpos][[1]];
	       obasis = StringJoin[StringTake[str,{4,dpos-1}],".",StringTake[str,{dpos+1,StringLength[str]}]];
	       If[FORMEL`CalcFormulaBasis == FORMEL`OxygenBasis,bo[[i]] = ToExpression[obasis]];
	       If[FORMEL`CalcFormulaBasis == FORMEL`CationBasis,bc[[i]] = ToExpression[obasis]];
	       ];
	     ];	    	     	   

	   If[str == "grt", bo[[i]] = 12; bc[[i]] = 8];
	   If[str == "bt", If[h2o==0,bo[[i]] = 11, bo[[i]] = 12]; bc[[i]] = 8];
	   If[str == "wm" || ToString[min[[i]]] == "ta", If[h2o==0,bo[[i]] = 11,bo[[i]] = 12]; bc[[i]] = 7];
	   If[str == "kf" || ToString[min[[i]]] == "plag", bo[[i]] = 8.; bc[[i]] = 5.];
	   If[str == "chl", If[h2o==0,bo[[i]] = 14,bo[[i]] = 18]; bc[[i]] = 10];
	   If[str == "stau", If[h2o==0,bo[[i]] = 46,bo[[i]] = 48]; bc[[i]] = 30];
	   If[str == "ctd", If[h2o==0,bo[[i]] = 6,bo[[i]] = 7]; bc[[i]] = 4];
	   If[str == "alsi",bo[[i]] = 5; bc[[i]] = 3];
	   If[str == "crd", bo[[i]] = 18; bc[[i]] = 11];
	   If[str == "ol", bo[[i]] = 4; bc[[i]] = 3];
	   If[str == "zoep", If[h2o==0,bo[[i]] = 12.5,bo[[i]] = 13]; bc[[i]] = 8];
	   If[str == "cal", If[co2==0,bo[[i]] = 1,bo[[i]] = 3]; bc[[i]] = 1];
	   If[str == "dol", If[co2==0,bo[[i]] = 2,bo[[i]] = 6]; bc[[i]] = 2];
	   If[str == "spin", bo[[i]] = 4; bc[[i]] = 3];
	   If[str == "saph", bo[[i]] = 20; bc[[i]] = 14];
	   If[str == "fetiox", bo[[i]] = 3; bc[[i]] = 2];
	   If[str == "sphen", bo[[i]] = 5; bc[[i]] = 3];
	   If[str == "amph", If[h2o==0,bo[[i]] = 23,bo[[i]] = 24]; bc[[i]] = 15];
	   If[str == "cpx"||str == "opx", bo[[i]] = 6.; bc[[i]] = 4.];
	   If[str == "stilp", If[h2o==0,bo[[i]] = 23.8125, bo[[i]] = 26.625]; bc[[i]] = 15.625];	   
	   If[str == "kf"||str == "plag" || str == "zoep"|| str == "alsi" ||str == "sphen",
	     p = Position[ox,"FeO"];
	     If[p != {},
	       If[w[[i,p[[1,1]]]] != 0, Print["Error-message from -CalcFormula-: \"FeO\" for Fsp, Alsi, Zo/Ep, Sphen must be given as \"Fe2O3\" !"];
	          Print["Use -TransformDatFile- to introduce a column \"Fe2O3\" in your data file !"];
		  Print["(see TransformDatFile::usage for more details)."];
	          Return[]]]];
	   ];
	kic = cioxused/mgused;
	kio = oioxused/mgused; 
	so = sc = Table[0,{j,1,nz}];
	cio = Table[0,{j,1,nz},{i,1,nsp}];
	
	(* main loop *)
	For[j=1,j<=nz,j++, (* calculate formula units, site fractions etc. *)	    
	   
	   If[FORMEL`CalcFormulaBasis == FORMEL`OxygenBasis,
	     so[[j]] = Sum[kio[[i]] w[[j,i]], {i,nsp}]; (* sum of anions *)
	     If[f==1, of = 16/2 w[[j,Position[ox,"F"][[1,1]]]]/mgused[[Position[ox,"F"][[1,1]]]]];
	     If[cl==1, ocl = 16/2 w[[j,Position[ox,"Cl"][[1,1]]]]/mgused[[Position[ox,"Cl"][[1,1]]]]];
	     If[s==1, os = 16 w[[j,Position[ox,"S"][[1,1]]]]/mgused[[Position[ox,"S"][[1,1]]]]];	 	   
 	     For[i=1,i<=nsp,i++, 	      
 	        cio[[j,i]] = (w[[j,i]] kic[[i]] bo[[j]])/so[[j]] ]; (* formula on oxygen basis *)
	     ];
	   
	   If[FORMEL`CalcFormulaBasis == FORMEL`CationBasis,
	     For[i=1,i<=nsp,i++, ox[[i]] = ToString[ox[[i]]];
	        If[ox[[i]]!= "F" && ox[[i]]!= "Cl" && ox[[i]]!= "S" && ox[[i]]!= "H2O" && ox[[i]]!= "CO2",
	          sc[[j]] = sc[[j]] + kic[[i]] w[[j,i]]; (* sum of cations excluding F, Cl, S, H2O, CO2 *)
	          ]];
 	     For[i=1,i<=nsp,i++, 	      
 	        cio[[j,i]] = (w[[j,i]] kic[[i]] bc[[j]])/sc[[j]]  ]; (* formula on cation basis *)	      
	     ];

	   x = " ";
	   If[ToString[min[[j]]] == "bt", x = Bt[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "wm", x = Wm[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "grt", 
	     {cio[[j]],x} = Grt[cio[[j]],ox,bo[[j]],bc[[j]],FORMEL`Fe3Grt,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "kf" || ToString[min[[j]]] == "plag", x = Fsp[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "chl", x = Chl[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "stau", x = Stau[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "ctd", 
	     {cio[[j]],x} = Ctd[cio[[j]],ox,bo[[j]],bc[[j]],FORMEL`Fe3Ctd,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "crd", x = Crd[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "ol", x = Ol[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "zoep", x = Ep[cio[[j]],ox]];
	   If[ToString[min[[j]]] == "cal", x = Cal[cio[[j]],ox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "dol", x = Dol[cio[[j]],ox]];
	   If[ToString[min[[j]]] == "spin",
	     {cio[[j]],x} = Sp[cio[[j]],ox,bo[[j]],bc[[j]],FORMEL`Fe3Spin,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "saph",
	     {cio[[j]],x} = Saph[cio[[j]],ox,bo[[j]],bc[[j]],FORMEL`Fe3Saph]];
	   If[ToString[min[[j]]] == "fetiox",
	     {cio[[j]],x} = Ilm[cio[[j]],ox,bo[[j]],bc[[j]],FORMEL`Fe3Fetiox,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "sphen", x = Sphen[cio[[j]],ox]];
	   If[ToString[min[[j]]] == "ta", x = Talc[cio[[j]],ox]];
	   If[ToString[min[[j]]] == "amph",
	     {cio[[j]],x} = Amph[cio[[j]],ox,FORMEL`Fe3Amph,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "cpx"||ToString[min[[j]]] == "opx",
	     {cio[[j]],x} = Px[cio[[j]],ox,FORMEL`Fe3Px,FORMEL`CalcFormulaMode]];
	   If[ToString[min[[j]]] == "stilp", x = Stilp[cio[[j]],ox,FORMEL`CalcFormulaMode]];

(*	   cio[[j]] = Append[cio[[j]],Sum[w[[j,i]],{i,1,nsp}]-of-ocl-os]; correct sum of wt.% for F, Cl, S  replacing O    *)
	   cio[[j]] = Append[cio[[j]],Sum[w[[j,i]],{i,1,nsp}]];
	   cio[[j]] = Prepend[Prepend[cio[[j]],no[[j]]],min[[j]]];
	   If[ToString[x] != " ", cio[[j]] = Join[cio[[j]],x]];
	
	   (* reformating output *)
	   n=Dimensions[cio[[j]]][[1]]; flag=0;
	   For[i=1,i<=n, i++, (* loop over an individual analysis *) 
	      If[NumberQ[cio[[j,i]]], 
	         pos = StringPosition[ToString[InputForm[cio[[j,i]]]],"*^"];
	         If[pos == {}, cio[[j,i]] = ToExpression[ToString[NumberForm[cio[[j,i]],form1]]]];
	         ];
	       If[i == n && Dimensions[cio[[j,n]]] != {}, (* the last element after Total: {Al(IV),...  *)	       
	          For[ii=1,ii<=Dimensions[cio[[j,n]]][[1]],ii++, (* loop over last element: two lists *)
	             If[ii==1, (* first element: {Al(IV),Al(VI),etc.}  *)
	               nn = Dimensions[cio[[j,n,ii,2]]][[1]];
		       For[iii=1,iii<=nn,iii++, (* loop over length of 1st element: {Al(IV),Al(VI),etc.} *)
		      	  If[NumberQ[cio[[j,n,ii,2,iii]]],
	       	            pos = StringPosition[ToString[InputForm[cio[[j,n,ii,2,iii]]]],"*^"];
	         	    If[pos == {}, cio[[j,n,ii,2,iii]] = ToExpression[ToString[NumberForm[cio[[j,n,ii,2,iii]],form2]]]];
		            ];
		          ];  (* end of For[iii=1,  *)
			]; (* end of If[ii==1,  *)
	             If[ii==2, (* second element: {{"XNa","XK","XCa"},{"XAlM","XFeM","XMgM"}}, etc. *)
		       If[Dimensions[cio[[j,n,ii]]][[1]] == 4, flag=1];
	               nn = Dimensions[cio[[j,n,ii,2]]][[1]];
		       For[iii=1,iii<=nn,iii++, (* loop over length of 2nd element  *)
		          For[iiii=1,iiii<=Dimensions[cio[[j,n,ii,2,iii]]][[1]],iiii++, 
		      	     If[NumberQ[cio[[j,n,ii,2,iii,iiii]]],
	       	               pos = StringPosition[ToString[InputForm[cio[[j,n,ii,2,iii,iiii]]]],"*^"];
	         	       If[pos == {}, cio[[j,n,ii,2,iii,iiii]] = ToExpression[ToString[NumberForm[cio[[j,n,ii,2,iii,iiii]],form2]]]];
		               ];
			     ]; 
		          ];  (* end of For[iii=1,  *)
			If[flag == 1,
  			  For[iii=1,iii<=Dimensions[cio[[j,n,ii,4]]][[1]],iii++,
      			     cio[[j,n,ii,4,iii]] = ToExpression[ToString[NumberForm[cio[[j,n,ii,4,iii]],form2]]]];
			  ];
			]; (* end of If[ii==2,  *)			  						
	             If[ii==3, (* third element: parameters for gtb's  *)
	               nn = Dimensions[cio[[j,n,ii,2]]][[1]];	               
		       For[iii=1,iii<=nn,iii++, (* loop over length of 2nd element  *)
		          For[iiii=1,iiii<=Dimensions[cio[[j,n,ii,2,iii]]][[1]],iiii++, 
		      	     If[NumberQ[cio[[j,n,ii,2,iii,iiii]]],
	       	               pos = StringPosition[ToString[InputForm[cio[[j,n,ii,2,iii,iiii]]]],"*^"];
	         	       If[pos == {}, cio[[j,n,ii,2,iii,iiii]] = ToExpression[ToString[NumberForm[cio[[j,n,ii,2,iii,iiii]],form2]]]];
		               ];
			     ]; 
		          ];  (* end of For[iii=1,  *)
			]; (* end of If[ii==3,  *)												
		     ]; (* end of For[ii=1,  *)
	         ]; (* end of If[i == n  *)
	      ];   (* end of For[i=1,  *)
	  ]; (* end of main loop  *)
	  
	return = {Prepend[Prepend[Append[ToExpression[ox],ToExpression["Total"]],"Label"],ToExpression["Mineral"]],
		  cio,ToString[FORMEL`CalcFormulaBasis],ToString[Options[Dataset][[1, 2]]],StringJoin["Date: ",ToString[Take[Date[],{1,3}]]]};  
	fnamel = StringJoin[fname,".fu"];
	If[FileNames[fnamel] != {}, DeleteFile[fnamel]];  
	Put[return,fnamel];
	Print["Message from -CalcFormula-: creating file \"",fnamel,"\"."];
	Return[return];
]
Options[CalcFormula] = {FORMEL`Fe3Grt->FORMEL`Droop,
			FORMEL`Fe3Amph->FORMEL`HollandBlundy,
			FORMEL`Fe3Px->FORMEL`Droop,
			FORMEL`Fe3Spin->FORMEL`Droop,
                        FORMEL`Fe3Ctd->FORMEL`Droop,
                        FORMEL`Fe3Saph->FORMEL`Droop,
                        FORMEL`Fe3Fetiox->FORMEL`Droop,
                        FORMEL`Oxygens->{},
			FORMEL`NumberFormatFu->{5,3},
			FORMEL`NumberFormatX->{8,5},
			FORMEL`CalcFormulaMode->FORMEL`PetToTweeq,
			FORMEL`CalcFormulaBasis->FORMEL`OxygenBasis			
			};
CalcFormula[fname_,opts___] := Block[{opt={FORMEL`Fe3Grt,FORMEL`Fe3Amph,FORMEL`Fe3Px,FORMEL`Fe3Spin,FORMEL`Fe3Ctd,FORMEL`Fe3Saph,FORMEL`Fe3Fetiox,
	FORMEL`Oxygens,FORMEL`NumberFormatFu,FORMEL`NumberFormatX,FORMEL`CalcFormulaMode,FORMEL`CalcFormulaBasis},
	i,n=Dimensions[{opts}][[1]]},
	For[i=1,i<=n,i++, If[Position[opt,{opts}[[i,1]]] == {}, Print["Unknown option \"",{opts}[[i,1]],"\" in -CalcFormula-."];
	   Print["Known options are: ",opt];Return[]]];
	CCalcFormula[fname,FORMEL`Fe3Grt/.{opts}/.Options[CalcFormula],FORMEL`Fe3Amph/.{opts}/.Options[CalcFormula],
	FORMEL`Fe3Px/.{opts}/.Options[CalcFormula],FORMEL`Fe3Spin/.{opts}/.Options[CalcFormula],
	FORMEL`Fe3Ctd/.{opts}/.Options[CalcFormula],FORMEL`Fe3Saph/.{opts}/.Options[CalcFormula],
	FORMEL`Fe3Fetiox/.{opts}/.Options[CalcFormula],FORMEL`Oxygens/.{opts}/.Options[CalcFormula],
	FORMEL`NumberFormatFu/.{opts}/.Options[CalcFormula],FORMEL`NumberFormatX/.{opts}/.Options[CalcFormula],
	FORMEL`CalcFormulaMode/.{opts}/.Options[CalcFormula],FORMEL`CalcFormulaBasis/.{opts}/.Options[CalcFormula]	
    ]];
      
End[]
                     
EndPackage[]

